{"data": {"CAPA": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "INFO", "description": "access PEB ldr_data"}, {"severity": "INFO", "description": "link function at runtime on Windows"}, {"severity": "INFO", "description": "parse PE header"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "check OS version"}, {"severity": "INFO", "description": "query environment variable"}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "enumerate files on Windows"}, {"severity": "INFO", "description": "get file size"}]}, {"id": "T1614", "name": "System Location Discovery", "link": "https://attack.mitre.org/techniques/T1614/", "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.", "signatures": [{"severity": "INFO", "description": "get geographical location"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}, {"id": "T1573", "name": "Encrypted Channel", "link": "https://attack.mitre.org/techniques/T1573/", "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1553", "name": "Subvert Trust Controls", "link": "https://attack.mitre.org/techniques/T1553/", "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution."}]}]}]}, "VMRay": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "INFO", "description": "(Process #1) galaxy swapper v2.exe resolves 21 API functions by name."}]}, {"id": "T1143", "name": "Hidden Window", "link": "https://attack.mitre.org/techniques/T1143/", "description": "Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\nWindows\nThere are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and VBScript to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden.  \nMac\nThe configurations for how applications run on macOS are listed in property list (plist) files. One of the tags in these files can be\u00a0apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window.", "signatures": [{"severity": "INFO", "description": "(Process #1) galaxy swapper v2.exe starts (process #3) msbuild.exe with a hidden window."}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "kernel.appcore.dll", "windows.storage.dll", "wintypes.dll", "winhttp.dll", "ondemandconnroutehelper.dll", "webio.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "sspicli.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "schannel.dll", "ncrypt.dll", "ntasn1.dll", "bcrypt.dll", "ncryptsslp.dll", "msasn1.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "gpapi.dll", "profapi.dll", "cryptnet.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "dpapi.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "kernel.appcore.dll", "windows.storage.dll", "wintypes.dll", "winhttp.dll", "ondemandconnroutehelper.dll", "webio.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "sspicli.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "schannel.dll", "ncrypt.dll", "ntasn1.dll", "bcrypt.dll", "ncryptsslp.dll", "msasn1.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "gpapi.dll", "profapi.dll", "cryptnet.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "dpapi.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "LOW", "description": "Injects a PE file into a foreign processes", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 401000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 44F000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 451000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45D000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 8A5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 401000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 44F000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 451000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45D000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 8A5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 401000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 44F000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 451000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45D000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 8A5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "kernel.appcore.dll", "windows.storage.dll", "wintypes.dll", "winhttp.dll", "ondemandconnroutehelper.dll", "webio.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "sspicli.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "schannel.dll", "ncrypt.dll", "ntasn1.dll", "bcrypt.dll", "ncryptsslp.dll", "msasn1.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "gpapi.dll", "profapi.dll", "cryptnet.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "dpapi.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "LOW", "description": "Injects a PE file into a foreign processes", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 401000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 44F000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 451000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45D000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 8A5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 401000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 44F000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 451000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45D000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 8A5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 401000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 44F000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 451000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45D000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 8A5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Creates files inside the user directory", "match_data": ["C:\\Users\\user\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache\\MetaData\\3ACF660917F73E764D4410BF1EAA48F5"]}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "Binary may include packed or crypted data", "match_data": ["section name: .text entropy: 6.882543090246862"]}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "INFO", "description": "Binary may include packed or crypted data", "match_data": ["section name: .text entropy: 6.882543090246862", "Section: .bss ZLIB complexity 1.0003245881088825"]}, {"severity": "INFO", "description": "PE file has section (not .text) which is very likely to contain packed code (zlib compression ratio < 0.011)", "match_data": ["section name: .text entropy: 6.882543090246862", "Section: .bss ZLIB complexity 1.0003245881088825"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["Hyper-V RAW{", "Hyper-V RAWf", "Hyper-V RAW"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1573", "name": "Encrypted Channel", "link": "https://attack.mitre.org/techniques/T1573/", "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "signatures": [{"severity": "INFO", "description": "Uses HTTPS", "match_data": ["HTTP traffic on port 443 -> 49721", "HTTP traffic on port 49731 -> 443", "HTTP traffic on port 49727 -> 443", "HTTP traffic on port 49729 -> 443", "HTTP traffic on port 443 -> 49716", "HTTP traffic on port 49715 -> 443", "HTTP traffic on port 49680 -> 443", "HTTP traffic on port 443 -> 49715", "HTTP traffic on port 49736 -> 443", "HTTP traffic on port 443 -> 49736", "HTTP traffic on port 443 -> 49734", "HTTP traffic on port 443 -> 49732", "HTTP traffic on port 49734 -> 443", "HTTP traffic on port 443 -> 49731", "HTTP traffic on port 443 -> 49730", "HTTP traffic on port 49732 -> 443", "HTTP traffic on port 49730 -> 443", "HTTP traffic on port 49726 -> 443", "HTTP traffic on port 49724 -> 443", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 443 -> 49729", "HTTP traffic on port 49716 -> 443", "HTTP traffic on port 443 -> 49727", "HTTP traffic on port 443 -> 49726", "HTTP traffic on port 443 -> 49724"]}, {"severity": "INFO", "description": "Uses HTTPS for network communication, use the SSL MITM Proxy cookbook for further analysis", "match_data": ["HTTP traffic on port 443 -> 49721", "HTTP traffic on port 49731 -> 443", "HTTP traffic on port 49727 -> 443", "HTTP traffic on port 49729 -> 443", "HTTP traffic on port 443 -> 49716", "HTTP traffic on port 49715 -> 443", "HTTP traffic on port 49680 -> 443", "HTTP traffic on port 443 -> 49715", "HTTP traffic on port 49736 -> 443", "HTTP traffic on port 443 -> 49736", "HTTP traffic on port 443 -> 49734", "HTTP traffic on port 443 -> 49732", "HTTP traffic on port 49734 -> 443", "HTTP traffic on port 443 -> 49731", "HTTP traffic on port 443 -> 49730", "HTTP traffic on port 49732 -> 443", "HTTP traffic on port 49730 -> 443", "HTTP traffic on port 49726 -> 443", "HTTP traffic on port 49724 -> 443", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 443 -> 49729", "HTTP traffic on port 49716 -> 443", "HTTP traffic on port 443 -> 49727", "HTTP traffic on port 443 -> 49726", "HTTP traffic on port 443 -> 49724"]}]}, {"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET / HTTP/1.1Cache-Control: max-age = 3600Connection: Keep-AliveAccept: */*If-Modified-Since: Fri, 13 Dec 2024 18:01:23 GMTIf-None-Match: \"675c7673-2de\"User-Agent: Microsoft-CryptoAPI/10.0Host: x1.c.", "GET /r/r1.crl HTTP/1.1Cache-Control: max-age = 3000Connection: Keep-AliveAccept: */*If-Modified-Since: Thu, 25 Jul 2024 14:48:00 GMTUser-Agent: Microsoft-CryptoAPI/10.0Host: c.pki.goog", "DNS query: x1.c.lencr.org", "DNS query: c.pki.goog", "DNS query: clarmodq.top", "DNS query: zenithcorde.top", "DNS query: windows.msn.com", "DNS query: techguidet.digital", "DNS query: btcgeared.live", "DNS query: buzzarddf.live", "DNS query: techsyncq.run", "DNS query: fishgh.digital", "DNS query: parakehjet.run", "DNS query: bearjk.live", "DNS query: steamcommunity.com", "DNS query: assets.msn.com"]}, {"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["GET / HTTP/1.1Cache-Control: max-age = 3600Connection: Keep-AliveAccept: */*If-Modified-Since: Fri, 13 Dec 2024 18:01:23 GMTIf-None-Match: \"675c7673-2de\"User-Agent: Microsoft-CryptoAPI/10.0Host: x1.c.", "GET /r/r1.crl HTTP/1.1Cache-Control: max-age = 3000Connection: Keep-AliveAccept: */*If-Modified-Since: Thu, 25 Jul 2024 14:48:00 GMTUser-Agent: Microsoft-CryptoAPI/10.0Host: c.pki.goog", "DNS query: x1.c.lencr.org", "DNS query: c.pki.goog", "DNS query: clarmodq.top", "DNS query: zenithcorde.top", "DNS query: windows.msn.com", "DNS query: techguidet.digital", "DNS query: btcgeared.live", "DNS query: buzzarddf.live", "DNS query: techsyncq.run", "DNS query: fishgh.digital", "DNS query: parakehjet.run", "DNS query: bearjk.live", "DNS query: steamcommunity.com", "DNS query: assets.msn.com"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET / HTTP/1.1Cache-Control: max-age = 3600Connection: Keep-AliveAccept: */*If-Modified-Since: Fri, 13 Dec 2024 18:01:23 GMTIf-None-Match: \"675c7673-2de\"User-Agent: Microsoft-CryptoAPI/10.0Host: x1.c.", "GET /r/r1.crl HTTP/1.1Cache-Control: max-age = 3000Connection: Keep-AliveAccept: */*If-Modified-Since: Thu, 25 Jul 2024 14:48:00 GMTUser-Agent: Microsoft-CryptoAPI/10.0Host: c.pki.goog", "DNS query: x1.c.lencr.org", "DNS query: c.pki.goog", "DNS query: clarmodq.top", "DNS query: zenithcorde.top", "DNS query: windows.msn.com", "DNS query: techguidet.digital", "DNS query: btcgeared.live", "DNS query: buzzarddf.live", "DNS query: techsyncq.run", "DNS query: fishgh.digital", "DNS query: parakehjet.run", "DNS query: bearjk.live", "DNS query: steamcommunity.com", "DNS query: assets.msn.com", "HTTP traffic on port 443 -> 49721", "HTTP traffic on port 49731 -> 443", "HTTP traffic on port 49727 -> 443", "HTTP traffic on port 49729 -> 443", "HTTP traffic on port 443 -> 49716", "HTTP traffic on port 49715 -> 443", "HTTP traffic on port 49680 -> 443", "HTTP traffic on port 443 -> 49715", "HTTP traffic on port 49736 -> 443", "HTTP traffic on port 443 -> 49736", "HTTP traffic on port 443 -> 49734", "HTTP traffic on port 443 -> 49732", "HTTP traffic on port 49734 -> 443", "HTTP traffic on port 443 -> 49731", "HTTP traffic on port 443 -> 49730", "HTTP traffic on port 49732 -> 443", "HTTP traffic on port 49730 -> 443", "HTTP traffic on port 49726 -> 443", "HTTP traffic on port 49724 -> 443", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 443 -> 49729", "HTTP traffic on port 49716 -> 443", "HTTP traffic on port 443 -> 49727", "HTTP traffic on port 443 -> 49726", "HTTP traffic on port 443 -> 49724"]}, {"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["GET / HTTP/1.1Cache-Control: max-age = 3600Connection: Keep-AliveAccept: */*If-Modified-Since: Fri, 13 Dec 2024 18:01:23 GMTIf-None-Match: \"675c7673-2de\"User-Agent: Microsoft-CryptoAPI/10.0Host: x1.c.", "GET /r/r1.crl HTTP/1.1Cache-Control: max-age = 3000Connection: Keep-AliveAccept: */*If-Modified-Since: Thu, 25 Jul 2024 14:48:00 GMTUser-Agent: Microsoft-CryptoAPI/10.0Host: c.pki.goog", "DNS query: x1.c.lencr.org", "DNS query: c.pki.goog", "DNS query: clarmodq.top", "DNS query: zenithcorde.top", "DNS query: windows.msn.com", "DNS query: techguidet.digital", "DNS query: btcgeared.live", "DNS query: buzzarddf.live", "DNS query: techsyncq.run", "DNS query: fishgh.digital", "DNS query: parakehjet.run", "DNS query: bearjk.live", "DNS query: steamcommunity.com", "DNS query: assets.msn.com", "HTTP traffic on port 443 -> 49721", "HTTP traffic on port 49731 -> 443", "HTTP traffic on port 49727 -> 443", "HTTP traffic on port 49729 -> 443", "HTTP traffic on port 443 -> 49716", "HTTP traffic on port 49715 -> 443", "HTTP traffic on port 49680 -> 443", "HTTP traffic on port 443 -> 49715", "HTTP traffic on port 49736 -> 443", "HTTP traffic on port 443 -> 49736", "HTTP traffic on port 443 -> 49734", "HTTP traffic on port 443 -> 49732", "HTTP traffic on port 49734 -> 443", "HTTP traffic on port 443 -> 49731", "HTTP traffic on port 443 -> 49730", "HTTP traffic on port 49732 -> 443", "HTTP traffic on port 49730 -> 443", "HTTP traffic on port 49726 -> 443", "HTTP traffic on port 49724 -> 443", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 443 -> 49729", "HTTP traffic on port 49716 -> 443", "HTTP traffic on port 443 -> 49727", "HTTP traffic on port 443 -> 49726", "HTTP traffic on port 443 -> 49724"]}, {"severity": "INFO", "description": "Uses HTTPS", "match_data": ["GET / HTTP/1.1Cache-Control: max-age = 3600Connection: Keep-AliveAccept: */*If-Modified-Since: Fri, 13 Dec 2024 18:01:23 GMTIf-None-Match: \"675c7673-2de\"User-Agent: Microsoft-CryptoAPI/10.0Host: x1.c.", "GET /r/r1.crl HTTP/1.1Cache-Control: max-age = 3000Connection: Keep-AliveAccept: */*If-Modified-Since: Thu, 25 Jul 2024 14:48:00 GMTUser-Agent: Microsoft-CryptoAPI/10.0Host: c.pki.goog", "DNS query: x1.c.lencr.org", "DNS query: c.pki.goog", "DNS query: clarmodq.top", "DNS query: zenithcorde.top", "DNS query: windows.msn.com", "DNS query: techguidet.digital", "DNS query: btcgeared.live", "DNS query: buzzarddf.live", "DNS query: techsyncq.run", "DNS query: fishgh.digital", "DNS query: parakehjet.run", "DNS query: bearjk.live", "DNS query: steamcommunity.com", "DNS query: assets.msn.com", "HTTP traffic on port 443 -> 49721", "HTTP traffic on port 49731 -> 443", "HTTP traffic on port 49727 -> 443", "HTTP traffic on port 49729 -> 443", "HTTP traffic on port 443 -> 49716", "HTTP traffic on port 49715 -> 443", "HTTP traffic on port 49680 -> 443", "HTTP traffic on port 443 -> 49715", "HTTP traffic on port 49736 -> 443", "HTTP traffic on port 443 -> 49736", "HTTP traffic on port 443 -> 49734", "HTTP traffic on port 443 -> 49732", "HTTP traffic on port 49734 -> 443", "HTTP traffic on port 443 -> 49731", "HTTP traffic on port 443 -> 49730", "HTTP traffic on port 49732 -> 443", "HTTP traffic on port 49730 -> 443", "HTTP traffic on port 49726 -> 443", "HTTP traffic on port 49724 -> 443", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 443 -> 49729", "HTTP traffic on port 49716 -> 443", "HTTP traffic on port 443 -> 49727", "HTTP traffic on port 443 -> 49726", "HTTP traffic on port 443 -> 49724"]}]}, {"id": "T1105", "name": "Ingress Tool Transfer", "link": "https://attack.mitre.org/techniques/T1105/", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.  A number of these tools, such as wget, curl, and scp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via certutil -hashfile).\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET / HTTP/1.1Cache-Control: max-age = 3600Connection: Keep-AliveAccept: */*If-Modified-Since: Fri, 13 Dec 2024 18:01:23 GMTIf-None-Match: \"675c7673-2de\"User-Agent: Microsoft-CryptoAPI/10.0Host: x1.c.", "GET /r/r1.crl HTTP/1.1Cache-Control: max-age = 3000Connection: Keep-AliveAccept: */*If-Modified-Since: Thu, 25 Jul 2024 14:48:00 GMTUser-Agent: Microsoft-CryptoAPI/10.0Host: c.pki.goog"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/7ff1489d712188a24c946aced021155bd1d5a4d1875d04e60d8f0c67f0949b2f/behaviour_mitre_trees"}}