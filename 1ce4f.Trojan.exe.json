{"data": {"CAPA": {"tactics": [{"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "modify access privileges"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "modify access privileges"}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "encode data using XOR"}, {"severity": "INFO", "description": "encrypt data using RC4 PRGA"}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "INFO", "description": "packed with generic packer"}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Qemu"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1614", "name": "System Location Discovery", "link": "https://attack.mitre.org/techniques/T1614/", "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.", "signatures": [{"severity": "INFO", "description": "get geographical location"}]}, {"id": "T1614.001", "name": "System Language Discovery", "link": "https://attack.mitre.org/techniques/T1614/001/", "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. \nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language or parsing the outputs of Windows API functions GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID.\nOn a macOS or Linux system, adversaries may query locale to retrieve the value of the $LANG environment variable.", "signatures": [{"severity": "INFO", "description": "identify system language via API"}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "check if file exists"}, {"severity": "INFO", "description": "get file size"}, {"severity": "INFO", "description": "get common file path"}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "query environment variable"}, {"severity": "INFO", "description": "check OS version"}, {"severity": "INFO", "description": "get disk information"}, {"severity": "INFO", "description": "get disk size"}, {"severity": "INFO", "description": "get system information on Windows"}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Qemu"}]}, {"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "INFO", "description": "query or enumerate registry value"}]}]}, {"id": "TA0040", "name": "Impact", "link": "https://attack.mitre.org/tactics/TA0040/", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "techniques": [{"id": "T1529", "name": "System Shutdown/Reboot", "link": "https://attack.mitre.org/techniques/T1529/", "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. reload). They may also include shutdown/reboot of a virtual machine via hypervisor / cloud consoles or command line tools.\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.", "signatures": [{"severity": "INFO", "description": "shutdown system"}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "INFO", "description": "link function at runtime on Windows"}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "INFO", "description": "accept command line arguments"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may execute malicious payloads via loading shared modules."}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1014", "name": "Rootkit", "link": "https://attack.mitre.org/techniques/T1014/", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components."}]}, {"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system."}]}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}, {"id": "T1564", "name": "Hide Artifacts", "link": "https://attack.mitre.org/techniques/T1564/", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection."}]}, {"id": "T1202", "name": "Indirect Command Execution", "link": "https://attack.mitre.org/techniques/T1202/", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), Scriptrunner.exe, as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts. Adversaries may also abuse the ssh.exe binary to execute malicious commands via the ProxyCommand and LocalCommand options, which can be invoked via the -o flag or by modifying the SSH config file.\nAdversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters."}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools."}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1548", "name": "Abuse Elevation Control Mechanism", "link": "https://attack.mitre.org/techniques/T1548/", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions."}]}, {"id": "T1070", "name": "Indicator Removal", "link": "https://attack.mitre.org/techniques/T1070/", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}, {"id": "T1564.001", "name": "Hidden Files and Directories", "link": "https://attack.mitre.org/techniques/T1564/001/", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system."}]}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1548", "name": "Abuse Elevation Control Mechanism", "link": "https://attack.mitre.org/techniques/T1548/", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0040", "name": "Impact", "link": "https://attack.mitre.org/tactics/TA0040/", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "techniques": [{"id": "T1496", "name": "Resource Hijacking", "link": "https://attack.mitre.org/techniques/T1496/", "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \nResource hijacking may take a number of different forms. For example, adversaries may:\n\nLeverage compute resources in order to mine cryptocurrency\nSell network bandwidth to proxy networks\nGenerate SMS traffic for profit\nAbuse cloud-based messaging services to send large quantities of spam messages\n\nIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "The process attempted to dynamically load a malicious function"}, {"severity": "UNKNOWN", "description": "The process tried to load dynamically one or more functions."}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "UNKNOWN", "description": "Detected command line output monitoring"}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1198", "name": "SIP and Trust Provider Hijacking", "link": "https://attack.mitre.org/techniques/T1198/", "description": "In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: \n\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\nModifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\nNote: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an Authenticode signature"}, {"severity": "UNKNOWN", "description": "The file have a Trusted Certificate"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1198", "name": "SIP and Trust Provider Hijacking", "link": "https://attack.mitre.org/techniques/T1198/", "description": "In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: \n\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\nModifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\nNote: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an Authenticode signature"}, {"severity": "UNKNOWN", "description": "The file have a Trusted Certificate"}]}, {"id": "T1140", "name": "Deobfuscate/Decode Files or Information", "link": "https://attack.mitre.org/techniques/T1140/", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b or type command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.", "signatures": [{"severity": "UNKNOWN", "description": "Detected an attempt to pull out some data from the binary image"}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   "}, {"id": "T1027.009", "name": "Embedded Payloads", "link": "https://attack.mitre.org/techniques/T1027/009/", "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets. \nAdversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats. \nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format. \nEmbedded content may also be used as Process Injection payloads used to infect benign system processes. These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.", "signatures": [{"severity": "UNKNOWN", "description": "The process has executed a dropped binary"}, {"severity": "UNKNOWN", "description": "Drops interesting files and uses them"}]}, {"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Packer Harvesting"}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Likely PROPagate Technique is running"}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Likely PROPagate Technique is running"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "Queries for the computername"}]}, {"id": "T1063", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1063/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nWindows\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\nMac\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.", "signatures": [{"severity": "UNKNOWN", "description": "It Tries to detect injection methods"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1064", "name": "Scripting", "link": "https://attack.mitre.org/techniques/T1064/", "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ", "signatures": [{"severity": "INFO", "description": "Found WSH timer for Javascript or VBS script (likely evasive script)", "match_data": ["window name: WSH-Timer"]}]}, {"id": "T1047", "name": "Windows Management Instrumentation", "link": "https://attack.mitre.org/techniques/T1047/", "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, wmic.exe can be abused by an adversary to delete shadow copies with the command wmic.exe Shadowcopy Delete (i.e., Inhibit System Recovery).\nNote: wmic.exe is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like wbemtool.exe, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.", "signatures": [{"severity": "LOW", "description": "Queries sensitive network adapter information (via WMI, Win32_NetworkAdapter, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;"]}, {"severity": "INFO", "description": "Queries process information (via WMI, Win32_Process)", "match_data": ["IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;"]}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "INFO", "description": "Very long cmdline option found, this is very uncommon (may be encrypted or packed)", "match_data": ["C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe powershell.exe -noprofile -command \"$taskname = 'windowspowershell.wbemscripting.swbemlocator'; $programpath = 'c:/users/public/documents/wind", "/LOADINF=\"filename\""]}, {"severity": "INFO", "description": "Sample might require command line arguments, analyze it with the command line cookbook", "match_data": ["C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe powershell.exe -noprofile -command \"$taskname = 'windowspowershell.wbemscripting.swbemlocator'; $programpath = 'c:/users/public/documents/wind", "/LOADINF=\"filename\""]}, {"severity": "INFO", "description": "Sample may offer command line options, please run it with the command line option cookbook (it's possible that the command line switches require additional characters like)", "match_data": ["C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe powershell.exe -noprofile -command \"$taskname = 'windowspowershell.wbemscripting.swbemlocator'; $programpath = 'c:/users/public/documents/wind", "/LOADINF=\"filename\""]}]}, {"id": "T1059.001", "name": "PowerShell", "link": "https://attack.mitre.org/techniques/T1059/001/", "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", "signatures": [{"severity": "LOW", "description": "Suspicious powershell command line found", "match_data": ["C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe powershell.exe -NoProfile -Command \"$taskName = 'WindowsPowerShell.WbemScripting.SWbemLocator'; $programPath = 'C:/Users/Public/Documents/Wind"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1064", "name": "Scripting", "link": "https://attack.mitre.org/techniques/T1064/", "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ", "signatures": [{"severity": "INFO", "description": "Found WSH timer for Javascript or VBS script (likely evasive script)", "match_data": ["window name: WSH-Timer"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "apphelp.dll", "mpr.dll", "version.dll", "wtsapi32.dll", "winhttp.dll", "kernel.appcore.dll", "winsta.dll", "shfolder.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "textshaping.dll", "textinputframework.dll", "coreuicomponents.dll", "coremessaging.dll", "ntmarta.dll", "wintypes.dll", "windows.storage.dll", "wldp.dll", "sspicli.dll", "dwmapi.dll", "sfc.dll", "sfc_os.dll", "explorerframe.dll", "wbemcomn.dll", "sxs.dll", "amsi.dll", "userenv.dll", "profapi.dll", "d3d9.dll", "d3d10warp.dll", "winmm.dll", "atl.dll", "mscoree.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "msasn1.dll", "gpapi.dll", "msisip.dll", "wshext.dll", "appxsip.dll", "opcservices.dll", "urlmon.dll", "xmllite.dll", "iertutil.dll", "srvcli.dll", "netutils.dll", "secur32.dll", "microsoft.management.infrastructure.native.unmanaged.dll", "mi.dll", "miutils.dll", "wmidcom.dll", "dpapi.dll", "vbscript.dll", "scrobj.dll", "irrlicht.dll", "kdump.dll", "mswsock.dll", "napinsp.dll", "pnrpnsp.dll", "wshbth.dll", "nlaapi.dll", "iphlpapi.dll", "dnsapi.dll", "winrnr.dll", "fwpuclnt.dll", "rasadhlp.dll", "tdh.dll", "dbghelp.dll", "wevtapi.dll", "pdh.dll", "dxgi.dll", "dinput8.dll", "inputhost.dll", "propsys.dll", "resourcepolicyclient.dll", "devenum.dll", "devobj.dll", "msdmo.dll", "avicap32.dll", "msvfw32.dll", "windows.staterepositorycore.dll", "windowscodecs.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["inProgram Manager", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000", "C:\\Windows\\SysWOW64\\svchost.exe EIP: 660000", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["inProgram Manager", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000", "C:\\Windows\\SysWOW64\\svchost.exe EIP: 660000", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Creates a thread in another existing process (thread injection)", "match_data": ["inProgram Manager", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000", "C:\\Windows\\SysWOW64\\svchost.exe EIP: 660000", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["inProgram Manager", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000", "C:\\Windows\\SysWOW64\\svchost.exe EIP: 660000", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000 protect: page execute and read and write"]}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "Binary may include packed or crypted data", "match_data": ["section name: .text entropy: 7.993824865341711", "section name: .nsp1 entropy: 7.980992623156407", "section name: .vmp1 entropy: 7.926737374560885", "section name: .vmp1 entropy: 7.89140272671988", "section name:         entropy: 7.902799077671111"]}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "INFO", "description": "Binary may include packed or crypted data", "match_data": ["section name: .text entropy: 7.993824865341711", "section name: .nsp1 entropy: 7.980992623156407", "section name: .vmp1 entropy: 7.926737374560885", "section name: .vmp1 entropy: 7.89140272671988", "section name:         entropy: 7.902799077671111", "Section: .text IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "Section: .nsp1 ZLIB complexity 0.9929707451515841"]}, {"severity": "INFO", "description": "PE file has an executable .text section which is very likely to contain packed code (zlib compression ratio < 0.3)", "match_data": ["section name: .text entropy: 7.993824865341711", "section name: .nsp1 entropy: 7.980992623156407", "section name: .vmp1 entropy: 7.926737374560885", "section name: .vmp1 entropy: 7.89140272671988", "section name:         entropy: 7.902799077671111", "Section: .text IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "Section: .nsp1 ZLIB complexity 0.9929707451515841"]}, {"severity": "INFO", "description": "PE file has section (not .text) which is very likely to contain packed code (zlib compression ratio < 0.011)", "match_data": ["section name: .text entropy: 7.993824865341711", "section name: .nsp1 entropy: 7.980992623156407", "section name: .vmp1 entropy: 7.926737374560885", "section name: .vmp1 entropy: 7.89140272671988", "section name:         entropy: 7.902799077671111", "Section: .text IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "Section: .nsp1 ZLIB complexity 0.9929707451515841"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Creates files inside the user directory", "match_data": ["C:\\Users\\Public\\Documents\\is-UI1QA.tmp"]}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "Stores large binary data to the registry", "match_data": ["HKEY_CURRENT_USER\\Console\\0 d33f351a4aeea5e608853d1a56661059"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "LOW", "description": "Queries sensitive network adapter information (via WMI, Win32_NetworkAdapter, often done to detect virtual machines)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains capabilities to detect virtual machines", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Sleep loop found (likely to delay execution)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "LOW", "description": "Checks for debuggers (window names)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}]}, {"id": "T1218", "name": "System Binary Proxy Execution", "link": "https://attack.mitre.org/techniques/T1218/", "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands."}, {"id": "T1218.011", "name": "Rundll32", "link": "https://attack.mitre.org/techniques/T1218/011/", "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. For example, ClickOnce can be proxied through Rundll32.exe.\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks. \nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload. ", "signatures": [{"severity": "INFO", "description": "Runs a DLL by calling functions", "match_data": ["C:\\Windows\\SysWOW64\\rundll32.exe rundll32.exe \"C:\\Users\\Public\\Documents\\WindowsData\\Hide.dll\",KeepProcess"]}]}]}, {"id": "TA0001", "name": "Initial Access", "link": "https://attack.mitre.org/tactics/TA0001/", "description": "The adversary is trying to get into your network.\n\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.", "techniques": [{"id": "T1091", "name": "Replication Through Removable Media", "link": "https://attack.mitre.org/techniques/T1091/", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\nMobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "signatures": [{"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "[:"]}]}]}, {"id": "TA0008", "name": "Lateral Movement", "link": "https://attack.mitre.org/tactics/TA0008/", "description": "The adversary is trying to move through your environment.\n\nLateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier. ", "techniques": [{"id": "T1091", "name": "Replication Through Removable Media", "link": "https://attack.mitre.org/techniques/T1091/", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\nMobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "signatures": [{"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "[:"]}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges."}, {"id": "T1547.008", "name": "LSASS Driver", "link": "https://attack.mitre.org/techniques/T1547/008/", "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.", "signatures": [{"severity": "INFO", "description": "Spawns drivers", "match_data": ["\\Registry\\Machine\\System\\CurrentControlSet\\JvkyHuWae", "Load Driver"]}, {"severity": "INFO", "description": "Enables driver privileges", "match_data": ["\\Registry\\Machine\\System\\CurrentControlSet\\JvkyHuWae", "Load Driver"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "apphelp.dll", "mpr.dll", "version.dll", "wtsapi32.dll", "winhttp.dll", "kernel.appcore.dll", "winsta.dll", "shfolder.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "textshaping.dll", "textinputframework.dll", "coreuicomponents.dll", "coremessaging.dll", "ntmarta.dll", "wintypes.dll", "windows.storage.dll", "wldp.dll", "sspicli.dll", "dwmapi.dll", "sfc.dll", "sfc_os.dll", "explorerframe.dll", "wbemcomn.dll", "sxs.dll", "amsi.dll", "userenv.dll", "profapi.dll", "d3d9.dll", "d3d10warp.dll", "winmm.dll", "atl.dll", "mscoree.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "msasn1.dll", "gpapi.dll", "msisip.dll", "wshext.dll", "appxsip.dll", "opcservices.dll", "urlmon.dll", "xmllite.dll", "iertutil.dll", "srvcli.dll", "netutils.dll", "secur32.dll", "microsoft.management.infrastructure.native.unmanaged.dll", "mi.dll", "miutils.dll", "wmidcom.dll", "dpapi.dll", "vbscript.dll", "scrobj.dll", "irrlicht.dll", "kdump.dll", "mswsock.dll", "napinsp.dll", "pnrpnsp.dll", "wshbth.dll", "nlaapi.dll", "iphlpapi.dll", "dnsapi.dll", "winrnr.dll", "fwpuclnt.dll", "rasadhlp.dll", "tdh.dll", "dbghelp.dll", "wevtapi.dll", "pdh.dll", "dxgi.dll", "dinput8.dll", "inputhost.dll", "propsys.dll", "resourcepolicyclient.dll", "devenum.dll", "devobj.dll", "msdmo.dll", "avicap32.dll", "msvfw32.dll", "windows.staterepositorycore.dll", "windowscodecs.dll"]}]}, {"id": "T1543", "name": "Create or Modify System Process", "link": "https://attack.mitre.org/techniques/T1543/", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.  "}, {"id": "T1543.003", "name": "Windows Service", "link": "https://attack.mitre.org/techniques/T1543/003/", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.", "signatures": [{"severity": "INFO", "description": "Creates driver files", "match_data": ["C:\\Users\\Public\\Documents\\WindowsData\\rwdriver.sys"]}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "Stores large binary data to the registry", "match_data": ["HKEY_CURRENT_USER\\Console\\0 d33f351a4aeea5e608853d1a56661059"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges."}, {"id": "T1547.008", "name": "LSASS Driver", "link": "https://attack.mitre.org/techniques/T1547/008/", "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.", "signatures": [{"severity": "INFO", "description": "Spawns drivers", "match_data": ["\\Registry\\Machine\\System\\CurrentControlSet\\JvkyHuWae", "Load Driver"]}, {"severity": "INFO", "description": "Enables driver privileges", "match_data": ["\\Registry\\Machine\\System\\CurrentControlSet\\JvkyHuWae", "Load Driver"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "apphelp.dll", "mpr.dll", "version.dll", "wtsapi32.dll", "winhttp.dll", "kernel.appcore.dll", "winsta.dll", "shfolder.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "textshaping.dll", "textinputframework.dll", "coreuicomponents.dll", "coremessaging.dll", "ntmarta.dll", "wintypes.dll", "windows.storage.dll", "wldp.dll", "sspicli.dll", "dwmapi.dll", "sfc.dll", "sfc_os.dll", "explorerframe.dll", "wbemcomn.dll", "sxs.dll", "amsi.dll", "userenv.dll", "profapi.dll", "d3d9.dll", "d3d10warp.dll", "winmm.dll", "atl.dll", "mscoree.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "msasn1.dll", "gpapi.dll", "msisip.dll", "wshext.dll", "appxsip.dll", "opcservices.dll", "urlmon.dll", "xmllite.dll", "iertutil.dll", "srvcli.dll", "netutils.dll", "secur32.dll", "microsoft.management.infrastructure.native.unmanaged.dll", "mi.dll", "miutils.dll", "wmidcom.dll", "dpapi.dll", "vbscript.dll", "scrobj.dll", "irrlicht.dll", "kdump.dll", "mswsock.dll", "napinsp.dll", "pnrpnsp.dll", "wshbth.dll", "nlaapi.dll", "iphlpapi.dll", "dnsapi.dll", "winrnr.dll", "fwpuclnt.dll", "rasadhlp.dll", "tdh.dll", "dbghelp.dll", "wevtapi.dll", "pdh.dll", "dxgi.dll", "dinput8.dll", "inputhost.dll", "propsys.dll", "resourcepolicyclient.dll", "devenum.dll", "devobj.dll", "msdmo.dll", "avicap32.dll", "msvfw32.dll", "windows.staterepositorycore.dll", "windowscodecs.dll"]}]}, {"id": "T1543", "name": "Create or Modify System Process", "link": "https://attack.mitre.org/techniques/T1543/", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.  "}, {"id": "T1543.003", "name": "Windows Service", "link": "https://attack.mitre.org/techniques/T1543/003/", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.", "signatures": [{"severity": "INFO", "description": "Creates driver files", "match_data": ["C:\\Users\\Public\\Documents\\WindowsData\\rwdriver.sys"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["inProgram Manager", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000", "C:\\Windows\\SysWOW64\\svchost.exe EIP: 660000", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["inProgram Manager", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000", "C:\\Windows\\SysWOW64\\svchost.exe EIP: 660000", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Creates a thread in another existing process (thread injection)", "match_data": ["inProgram Manager", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000", "C:\\Windows\\SysWOW64\\svchost.exe EIP: 660000", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["inProgram Manager", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000", "C:\\Windows\\SysWOW64\\svchost.exe EIP: 660000", "C:\\Windows\\SysWOW64\\tracerpt.exe base: 6B0000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 650000 protect: page execute and read and write", "C:\\Windows\\SysWOW64\\svchost.exe base: 660000 protect: page execute and read and write"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "LOW", "description": "Queries sensitive network adapter information (via WMI, Win32_NetworkAdapter, often done to detect virtual machines)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains capabilities to detect virtual machines", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Sleep loop found (likely to delay execution)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "LOW", "description": "Checks for debuggers (window names)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["6438 > 30", "2444 > 30", "-10145709240540247s >= -30000s", "-922337203685477s >= -30000s", "137 > 30", "-60000s >= -30000s", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Count: 1562 delay: -10", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "delay time: 922337203685477", "delay time: 60000", "DebugPort", "DebugObjectHandle", "delay time: 922337203685477"]}]}, {"id": "T1120", "name": "Peripheral Device Discovery", "link": "https://attack.mitre.org/techniques/T1120/", "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.", "signatures": [{"severity": "INFO", "description": "Sample is looking for USB drives. Launch the sample with the USB Fake Disk cookbook", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "[:"]}, {"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "[:"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "LOW", "description": "Tries to evade debugger and weak emulator (self modifying code)", "match_data": ["First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;", "ModuleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Desktop-Required-Package0519~31bf3856ad364e35~amd64~~10.0.19041.1288.cat VolumeInformation"]}, {"severity": "INFO", "description": "Checks the free space of harddrives", "match_data": ["First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;", "ModuleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Desktop-Required-Package0519~31bf3856ad364e35~amd64~~10.0.19041.1288.cat VolumeInformation"]}, {"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;", "ModuleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Desktop-Required-Package0519~31bf3856ad364e35~amd64~~10.0.19041.1288.cat VolumeInformation"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;", "ModuleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Desktop-Required-Package0519~31bf3856ad364e35~amd64~~10.0.19041.1288.cat VolumeInformation"]}, {"severity": "INFO", "description": "Queries process information (via WMI, Win32_Process)", "match_data": ["First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;", "ModuleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Desktop-Required-Package0519~31bf3856ad364e35~amd64~~10.0.19041.1288.cat VolumeInformation"]}, {"severity": "INFO", "description": "Queries a list of all running drivers", "match_data": ["First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;", "ModuleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Desktop-Required-Package0519~31bf3856ad364e35~amd64~~10.0.19041.1288.cat VolumeInformation"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;360tray.exe&quot; OR Name=&quot;360Tray.exe&quot;", "IWbemServices::ExecQuery - root\\cimv2 : SELECT * FROM Win32_Process WHERE Name=&quot;MsMpEng.exe&quot;", "ModuleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Desktop-Required-Package0519~31bf3856ad364e35~amd64~~10.0.19041.1288.cat VolumeInformation"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "AV process strings found (often used to terminate AV products)", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Queries sensitive network adapter information (via WMI, Win32_NetworkAdapter, often done to detect virtual machines)", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Tries to detect process monitoring tools (Task Manager, Process Explorer etc.)", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "Contains capabilities to detect virtual machines", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Tries to evade debugger and weak emulator (self modifying code)", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Sample is protected by VMProtect", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Checks for debuggers (window names)", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["avp.exe", "360safe.exe", "msmpeng.exe", "360tray.exe", "IWbemServices::ExecQuery - ROOT\\CIMV2 : SELECT * FROM Win32_NetworkAdapter WHERE NetEnabled = FALSE", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dllj", "Get-NetEventVmNetworkAdapter", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`", "qemU5", "First address: 7FF706B5ACF6 instructions  caused by: Self-modifying code", "Section: .vmp1 IMAGE_SCN_CNT_CODE, IMAGE_SCN_CNT_INITIALIZED_DATA, IMAGE_SCN_MEM_DISCARDABLE, IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_READ, IMAGE_SCN_MEM_WRITE", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "Queries a list of all running processes", "match_data": ["ProcessInformation", "inProgram Manager"]}, {"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["ProcessInformation", "inProgram Manager"]}]}, {"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "INFO", "description": "Sample monitors Window changes (e.g. starting applications), analyze the sample with the simulation cookbook"}]}, {"id": "T1033", "name": "System Owner/User Discovery", "link": "https://attack.mitre.org/techniques/T1033/", "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nVarious utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.\nOn network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.", "signatures": [{"severity": "INFO", "description": "Reads the Windows registered organization settings", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion RegisteredOrganization", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion RegisteredOwner"]}, {"severity": "INFO", "description": "Reads the Windows registered owner settings", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion RegisteredOrganization", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion RegisteredOwner"]}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "INFO", "description": "Creates a DirectInput object (often for capturing keystrokes)", "match_data": ["DirectInput8Create", "0 mouse low level C:\\Windows\\System32\\DINPUT8.dll"]}, {"severity": "INFO", "description": "Installs a global mouse hook", "match_data": ["DirectInput8Create", "0 mouse low level C:\\Windows\\System32\\DINPUT8.dll"]}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "INFO", "description": "Creates a DirectInput object (often for capturing keystrokes)", "match_data": ["DirectInput8Create", "0 mouse low level C:\\Windows\\System32\\DINPUT8.dll"]}, {"severity": "INFO", "description": "Installs a global mouse hook", "match_data": ["DirectInput8Create", "0 mouse low level C:\\Windows\\System32\\DINPUT8.dll"]}]}, {"id": "T1560", "name": "Archive Collected Data", "link": "https://attack.mitre.org/techniques/T1560/", "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.", "signatures": [{"severity": "INFO", "description": "Public key (encryption) found", "match_data": ["-----BEGIN PUBLIC KEY-----"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1571", "name": "Non-Standard Port", "link": "https://attack.mitre.org/techniques/T1571/", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.", "signatures": [{"severity": "INFO", "description": "Detected TCP or UDP traffic on non-standard ports", "match_data": ["192.168.122.103:49683 -> 202.79.172.16:8880"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/1ce4f36e1af6db1cd550d8e59edd093a86f9ec7a38535fab1b3b111f2bb7bd1e/behaviour_mitre_trees"}}