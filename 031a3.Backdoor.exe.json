{"data": {"CAPA": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1140", "name": "Deobfuscate/Decode Files or Information", "link": "https://attack.mitre.org/techniques/T1140/", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b or type command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.", "signatures": [{"severity": "INFO", "description": "decode data using Base64 in .NET"}]}, {"id": "T1620", "name": "Reflective Code Loading", "link": "https://attack.mitre.org/techniques/T1620/", "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., Shared Modules).\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode). For example, the Assembly.Load() method executed by PowerShell may be abused to load raw code into the running process.\nReflective code injection is very similar to Process Injection except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.", "signatures": [{"severity": "INFO", "description": "invoke .NET assembly method"}, {"severity": "INFO", "description": "load .NET assembly"}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "obfuscated with SmartAssembly"}]}, {"id": "T1027.004", "name": "Compile After Delivery", "link": "https://attack.mitre.org/techniques/T1027/004/", "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe, csc.exe, or GCC/MinGW.\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.", "signatures": [{"severity": "INFO", "description": "compile .NET assembly"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "check if file exists"}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "query environment variable"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1539", "name": "Steal Web Session Cookie", "link": "https://attack.mitre.org/techniques/T1539/", "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.\nThere are several examples of malware targeting cookies from web browsers on the local system. Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on User Execution by tricking victims into running malicious JavaScript in their browser.\nThere are also open source frameworks such as Evilginx2 and Muraena that can gather session cookies through a malicious proxy (e.g., Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.\nAfter an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}, {"id": "T1573", "name": "Encrypted Channel", "link": "https://attack.mitre.org/techniques/T1573/", "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol."}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1106", "name": "Native API", "link": "https://attack.mitre.org/techniques/T1106/", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1202", "name": "Indirect Command Execution", "link": "https://attack.mitre.org/techniques/T1202/", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), Scriptrunner.exe, as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts. Adversaries may also abuse the ssh.exe binary to execute malicious commands via the ProxyCommand and LocalCommand options, which can be invoked via the -o flag or by modifying the SSH config file.\nAdversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters."}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}]}, "VMRay": {"tactics": [{"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "INFO", "description": "(Process #18) assemblyisprivate.exe reads installation type from registry."}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "(Process #18) assemblyisprivate.exe reads installation type from registry."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "HIGH", "description": "(Process #1) rfq-et moved to sap s4 hana rise-epprj03.exe executes base64-encoded PowerShell command."}]}, {"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "INFO", "description": "(Process #7) installutil.exe resolves 48 API functions by name."}]}, {"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "(Process #18) assemblyisprivate.exe enables process privilege \"SeDebugPrivilege\"."}]}, {"id": "T1140", "name": "Deobfuscate/Decode Files or Information", "link": "https://attack.mitre.org/techniques/T1140/", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b or type command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.", "signatures": [{"severity": "HIGH", "description": "(Process #1) rfq-et moved to sap s4 hana rise-epprj03.exe executes base64-encoded PowerShell command."}]}, {"id": "T1143", "name": "Hidden Window", "link": "https://attack.mitre.org/techniques/T1143/", "description": "Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\nWindows\nThere are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and VBScript to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden.  \nMac\nThe configurations for how applications run on macOS are listed in property list (plist) files. One of the tags in these files can be\u00a0apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window.", "signatures": [{"severity": "INFO", "description": "(Process #18) assemblyisprivate.exe starts (process #19) cmd.exe with a hidden window."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1060", "name": "Registry Run Keys / Startup Folder", "link": "https://attack.mitre.org/techniques/T1060/", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  These programs will be executed under the context of the user and will have the account's associated permissions level.\nPlacing a program within a startup folder will cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in.\nThe startup folder path for the current user is:\n* C:\\Users[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\nThe startup folder path for all users is:\n* C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\nThe following run keys are created by default on Windows systems:\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n* HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n* HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nThe HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nThe following Registry keys can be used to set startup folder items for persistence:\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\n* HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\n* HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nThe following Registry keys can control automatic startup of services during boot:\n* HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\n* HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n* HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell subkeys can automatically launch programs.\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run when any user logs on.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "signatures": [{"severity": "INFO", "description": "(Process #1) rfq-et moved to sap s4 hana rise-epprj03.exe adds \"C:\\Users\\RDhJ0CNFevzX\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\AssemblyIsPrivate.vbs\" to Windows startup folder."}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1086", "name": "PowerShell", "link": "https://attack.mitre.org/techniques/T1086/", "description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.  Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. \nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nAdministrator permissions are required to use PowerShell to connect to remote systems.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit,  and PSAttack. \nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly exposed through the .NET framework and Windows Common Language Interface (CLI).  ", "signatures": [{"severity": "HIGH", "description": "(Process #1) rfq-et moved to sap s4 hana rise-epprj03.exe executes base64-encoded PowerShell command."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "(Process #18) assemblyisprivate.exe enables process privilege \"SeDebugPrivilege\"."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "The process attempted to dynamically load a malicious function"}, {"severity": "UNKNOWN", "description": "The process tried to load dynamically one or more functions."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "The process has tried to detect the debugger probing the use of page guards."}, {"severity": "UNKNOWN", "description": "The process attempted to detect a running debugger using common APIs"}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "query environment variable"}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "UNKNOWN", "description": "check if file exists"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1140", "name": "Deobfuscate/Decode Files or Information", "link": "https://attack.mitre.org/techniques/T1140/", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b or type command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.", "signatures": [{"severity": "UNKNOWN", "description": "decode data using Base64 in .NET"}]}, {"id": "T1620", "name": "Reflective Code Loading", "link": "https://attack.mitre.org/techniques/T1620/", "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., Shared Modules).\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode). For example, the Assembly.Load() method executed by PowerShell may be abused to load raw code into the running process.\nReflective code injection is very similar to Process Injection except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.", "signatures": [{"severity": "UNKNOWN", "description": "load .NET assembly"}, {"severity": "UNKNOWN", "description": "invoke .NET assembly method"}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "obfuscated with SmartAssembly"}]}, {"id": "T1027.004", "name": "Compile After Delivery", "link": "https://attack.mitre.org/techniques/T1027/004/", "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe, csc.exe, or GCC/MinGW.\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.", "signatures": [{"severity": "UNKNOWN", "description": "compile .NET assembly"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["mscoree.dll", "apphelp.dll", "kernel.appcore.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "windows.storage.dll", "wintypes.dll", "profapi.dll", "bcrypt.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "iphlpapi.dll", "dnsapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "rasapi32.dll", "rtutils.dll", "rasman.dll", "mswsock.dll", "winhttp.dll", "ondemandconnroutehelper.dll", "rasadhlp.dll", "fwpuclnt.dll", "secur32.dll", "sspicli.dll", "schannel.dll", "ncrypt.dll", "ntasn1.dll", "ncryptsslp.dll", "msasn1.dll", "wldp.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "uxtheme.dll", "propsys.dll", "cfgmgr32.dll", "edputil.dll", "urlmon.dll", "iertutil.dll", "srvcli.dll", "netutils.dll", "windows.staterepositoryps.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["mscoree.dll", "apphelp.dll", "kernel.appcore.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "windows.storage.dll", "wintypes.dll", "profapi.dll", "bcrypt.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "iphlpapi.dll", "dnsapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "rasapi32.dll", "rtutils.dll", "rasman.dll", "mswsock.dll", "winhttp.dll", "ondemandconnroutehelper.dll", "rasadhlp.dll", "fwpuclnt.dll", "secur32.dll", "sspicli.dll", "schannel.dll", "ncrypt.dll", "ntasn1.dll", "ncryptsslp.dll", "msasn1.dll", "wldp.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "uxtheme.dll", "propsys.dll", "cfgmgr32.dll", "edputil.dll", "urlmon.dll", "iertutil.dll", "srvcli.dll", "netutils.dll", "windows.staterepositoryps.dll"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["mscoree.dll", "apphelp.dll", "kernel.appcore.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "windows.storage.dll", "wintypes.dll", "profapi.dll", "bcrypt.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "iphlpapi.dll", "dnsapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "rasapi32.dll", "rtutils.dll", "rasman.dll", "mswsock.dll", "winhttp.dll", "ondemandconnroutehelper.dll", "rasadhlp.dll", "fwpuclnt.dll", "secur32.dll", "sspicli.dll", "schannel.dll", "ncrypt.dll", "ntasn1.dll", "ncryptsslp.dll", "msasn1.dll", "wldp.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "uxtheme.dll", "propsys.dll", "cfgmgr32.dll", "edputil.dll", "urlmon.dll", "iertutil.dll", "srvcli.dll", "netutils.dll", "windows.staterepositoryps.dll"]}]}, {"id": "T1562", "name": "Impair Defenses", "link": "https://attack.mitre.org/techniques/T1562/", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents."}, {"id": "T1562.001", "name": "Disable or Modify Tools", "link": "https://attack.mitre.org/techniques/T1562/001/", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Alternatively, they may add new directories to an endpoint detection and response (EDR) tool\u2019s exclusion list, enabling them to hide malicious files via File/Path Exclusions.\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.", "signatures": [{"severity": "INFO", "description": "Creates guard pages, often used to prevent reverse engineering and debugging", "match_data": ["page read and write | page guard"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["delay time: 922337203685477", "delay time: 100000", "delay time: 99847", "delay time: 99722", "delay time: 99521", "delay time: 98104", "delay time: 97257", "delay time: 97093", "delay time: 96967", "delay time: 96823", "delay time: 96689", "delay time: 96484", "delay time: 96325", "delay time: 96204", "delay time: 96084", "delay time: 95963", "delay time: 95857", "delay time: 95596", "delay time: 95478", "delay time: 95092", "delay time: 94972", "delay time: 94441", "delay time: 93099", "delay time: 92879", "delay time: 92763", "delay time: 92386", "delay time: 92245", "delay time: 92129", "delay time: 92001", "delay time: 91778", "delay time: 91423", "delay time: 91169", "delay time: 91026", "delay time: 90670", "delay time: 90469", "delay time: 90294", "delay time: 89939", "delay time: 89544", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005", "28A0000 memory reserve | memory write watch", "2A00000 memory reserve | memory write watch", "4A00000 memory reserve | memory write watch", "7910000 memory reserve | memory write watch", "6FE0000 memory reserve | memory write watch", "2617 > 30", "-3689348814741908s >= -30000s", "-100000s >= -30000s", "-99847s >= -30000s", "-99722s >= -30000s", "-99521s >= -30000s", "-98104s >= -30000s", "-97257s >= -30000s", "-97093s >= -30000s", "-96967s >= -30000s", "-96823s >= -30000s", "-96689s >= -30000s", "-96484s >= -30000s", "-96325s >= -30000s", "-96204s >= -30000s", "-96084s >= -30000s", "252 > 30", "-95963s >= -30000s", "-95857s >= -30000s", "-95596s >= -30000s", "-95478s >= -30000s", "-95092s >= -30000s", "-94972s >= -30000s", "-94441s >= -30000s", "-93099s >= -30000s", "-92879s >= -30000s", "-92763s >= -30000s", "-92386s >= -30000s", "-92245s >= -30000s", "-92129s >= -30000s", "-92001s >= -30000s", "-91778s >= -30000s", "-91423s >= -30000s", "-91169s >= -30000s", "-91026s >= -30000s", "-90670s >= -30000s", "-90469s >= -30000s", "-90294s >= -30000s", "-89939s >= -30000s", "-89544s >= -30000s", "-592320s >= -30000s", "-592092s >= -30000s", "-591852s >= -30000s", "-591404s >= -30000s", "-590689s >= -30000s", "-590189s >= -30000s", "-590028s >= -30000s", "-589845s >= -30000s", "-589714s >= -30000s", "-589551s >= -30000s", "-589399s >= -30000s", "-589273s >= -30000s", "-589152s >= -30000s", "-589037s >= -30000s", "-588912s >= -30000s", "-588781s >= -30000s", "-588666s >= -30000s", "-588441s >= -30000s", "-588306s >= -30000s", "-588193s >= -30000s", "-588056s >= -30000s", "-587687s >= -30000s", "-587556s >= -30000s", "-587368s >= -30000s", "-587241s >= -30000s", "-587072s >= -30000s", "-586847s >= -30000s", "-586707s >= -30000s", "-586585s >= -30000s", "-586472s >= -30000s", "-586346s >= -30000s", "-586196s >= -30000s", "-586005s >= -30000s", "delay time: 922337203685477", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005"]}, {"severity": "INFO", "description": "Allocates memory with a write watch (potentially for evading sandboxes)", "match_data": ["delay time: 922337203685477", "delay time: 100000", "delay time: 99847", "delay time: 99722", "delay time: 99521", "delay time: 98104", "delay time: 97257", "delay time: 97093", "delay time: 96967", "delay time: 96823", "delay time: 96689", "delay time: 96484", "delay time: 96325", "delay time: 96204", "delay time: 96084", "delay time: 95963", "delay time: 95857", "delay time: 95596", "delay time: 95478", "delay time: 95092", "delay time: 94972", "delay time: 94441", "delay time: 93099", "delay time: 92879", "delay time: 92763", "delay time: 92386", "delay time: 92245", "delay time: 92129", "delay time: 92001", "delay time: 91778", "delay time: 91423", "delay time: 91169", "delay time: 91026", "delay time: 90670", "delay time: 90469", "delay time: 90294", "delay time: 89939", "delay time: 89544", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005", "28A0000 memory reserve | memory write watch", "2A00000 memory reserve | memory write watch", "4A00000 memory reserve | memory write watch", "7910000 memory reserve | memory write watch", "6FE0000 memory reserve | memory write watch", "2617 > 30", "-3689348814741908s >= -30000s", "-100000s >= -30000s", "-99847s >= -30000s", "-99722s >= -30000s", "-99521s >= -30000s", "-98104s >= -30000s", "-97257s >= -30000s", "-97093s >= -30000s", "-96967s >= -30000s", "-96823s >= -30000s", "-96689s >= -30000s", "-96484s >= -30000s", "-96325s >= -30000s", "-96204s >= -30000s", "-96084s >= -30000s", "252 > 30", "-95963s >= -30000s", "-95857s >= -30000s", "-95596s >= -30000s", "-95478s >= -30000s", "-95092s >= -30000s", "-94972s >= -30000s", "-94441s >= -30000s", "-93099s >= -30000s", "-92879s >= -30000s", "-92763s >= -30000s", "-92386s >= -30000s", "-92245s >= -30000s", "-92129s >= -30000s", "-92001s >= -30000s", "-91778s >= -30000s", "-91423s >= -30000s", "-91169s >= -30000s", "-91026s >= -30000s", "-90670s >= -30000s", "-90469s >= -30000s", "-90294s >= -30000s", "-89939s >= -30000s", "-89544s >= -30000s", "-592320s >= -30000s", "-592092s >= -30000s", "-591852s >= -30000s", "-591404s >= -30000s", "-590689s >= -30000s", "-590189s >= -30000s", "-590028s >= -30000s", "-589845s >= -30000s", "-589714s >= -30000s", "-589551s >= -30000s", "-589399s >= -30000s", "-589273s >= -30000s", "-589152s >= -30000s", "-589037s >= -30000s", "-588912s >= -30000s", "-588781s >= -30000s", "-588666s >= -30000s", "-588441s >= -30000s", "-588306s >= -30000s", "-588193s >= -30000s", "-588056s >= -30000s", "-587687s >= -30000s", "-587556s >= -30000s", "-587368s >= -30000s", "-587241s >= -30000s", "-587072s >= -30000s", "-586847s >= -30000s", "-586707s >= -30000s", "-586585s >= -30000s", "-586472s >= -30000s", "-586346s >= -30000s", "-586196s >= -30000s", "-586005s >= -30000s", "delay time: 922337203685477", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["delay time: 922337203685477", "delay time: 100000", "delay time: 99847", "delay time: 99722", "delay time: 99521", "delay time: 98104", "delay time: 97257", "delay time: 97093", "delay time: 96967", "delay time: 96823", "delay time: 96689", "delay time: 96484", "delay time: 96325", "delay time: 96204", "delay time: 96084", "delay time: 95963", "delay time: 95857", "delay time: 95596", "delay time: 95478", "delay time: 95092", "delay time: 94972", "delay time: 94441", "delay time: 93099", "delay time: 92879", "delay time: 92763", "delay time: 92386", "delay time: 92245", "delay time: 92129", "delay time: 92001", "delay time: 91778", "delay time: 91423", "delay time: 91169", "delay time: 91026", "delay time: 90670", "delay time: 90469", "delay time: 90294", "delay time: 89939", "delay time: 89544", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005", "28A0000 memory reserve | memory write watch", "2A00000 memory reserve | memory write watch", "4A00000 memory reserve | memory write watch", "7910000 memory reserve | memory write watch", "6FE0000 memory reserve | memory write watch", "2617 > 30", "-3689348814741908s >= -30000s", "-100000s >= -30000s", "-99847s >= -30000s", "-99722s >= -30000s", "-99521s >= -30000s", "-98104s >= -30000s", "-97257s >= -30000s", "-97093s >= -30000s", "-96967s >= -30000s", "-96823s >= -30000s", "-96689s >= -30000s", "-96484s >= -30000s", "-96325s >= -30000s", "-96204s >= -30000s", "-96084s >= -30000s", "252 > 30", "-95963s >= -30000s", "-95857s >= -30000s", "-95596s >= -30000s", "-95478s >= -30000s", "-95092s >= -30000s", "-94972s >= -30000s", "-94441s >= -30000s", "-93099s >= -30000s", "-92879s >= -30000s", "-92763s >= -30000s", "-92386s >= -30000s", "-92245s >= -30000s", "-92129s >= -30000s", "-92001s >= -30000s", "-91778s >= -30000s", "-91423s >= -30000s", "-91169s >= -30000s", "-91026s >= -30000s", "-90670s >= -30000s", "-90469s >= -30000s", "-90294s >= -30000s", "-89939s >= -30000s", "-89544s >= -30000s", "-592320s >= -30000s", "-592092s >= -30000s", "-591852s >= -30000s", "-591404s >= -30000s", "-590689s >= -30000s", "-590189s >= -30000s", "-590028s >= -30000s", "-589845s >= -30000s", "-589714s >= -30000s", "-589551s >= -30000s", "-589399s >= -30000s", "-589273s >= -30000s", "-589152s >= -30000s", "-589037s >= -30000s", "-588912s >= -30000s", "-588781s >= -30000s", "-588666s >= -30000s", "-588441s >= -30000s", "-588306s >= -30000s", "-588193s >= -30000s", "-588056s >= -30000s", "-587687s >= -30000s", "-587556s >= -30000s", "-587368s >= -30000s", "-587241s >= -30000s", "-587072s >= -30000s", "-586847s >= -30000s", "-586707s >= -30000s", "-586585s >= -30000s", "-586472s >= -30000s", "-586346s >= -30000s", "-586196s >= -30000s", "-586005s >= -30000s", "delay time: 922337203685477", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["delay time: 922337203685477", "delay time: 100000", "delay time: 99847", "delay time: 99722", "delay time: 99521", "delay time: 98104", "delay time: 97257", "delay time: 97093", "delay time: 96967", "delay time: 96823", "delay time: 96689", "delay time: 96484", "delay time: 96325", "delay time: 96204", "delay time: 96084", "delay time: 95963", "delay time: 95857", "delay time: 95596", "delay time: 95478", "delay time: 95092", "delay time: 94972", "delay time: 94441", "delay time: 93099", "delay time: 92879", "delay time: 92763", "delay time: 92386", "delay time: 92245", "delay time: 92129", "delay time: 92001", "delay time: 91778", "delay time: 91423", "delay time: 91169", "delay time: 91026", "delay time: 90670", "delay time: 90469", "delay time: 90294", "delay time: 89939", "delay time: 89544", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005", "28A0000 memory reserve | memory write watch", "2A00000 memory reserve | memory write watch", "4A00000 memory reserve | memory write watch", "7910000 memory reserve | memory write watch", "6FE0000 memory reserve | memory write watch", "2617 > 30", "-3689348814741908s >= -30000s", "-100000s >= -30000s", "-99847s >= -30000s", "-99722s >= -30000s", "-99521s >= -30000s", "-98104s >= -30000s", "-97257s >= -30000s", "-97093s >= -30000s", "-96967s >= -30000s", "-96823s >= -30000s", "-96689s >= -30000s", "-96484s >= -30000s", "-96325s >= -30000s", "-96204s >= -30000s", "-96084s >= -30000s", "252 > 30", "-95963s >= -30000s", "-95857s >= -30000s", "-95596s >= -30000s", "-95478s >= -30000s", "-95092s >= -30000s", "-94972s >= -30000s", "-94441s >= -30000s", "-93099s >= -30000s", "-92879s >= -30000s", "-92763s >= -30000s", "-92386s >= -30000s", "-92245s >= -30000s", "-92129s >= -30000s", "-92001s >= -30000s", "-91778s >= -30000s", "-91423s >= -30000s", "-91169s >= -30000s", "-91026s >= -30000s", "-90670s >= -30000s", "-90469s >= -30000s", "-90294s >= -30000s", "-89939s >= -30000s", "-89544s >= -30000s", "-592320s >= -30000s", "-592092s >= -30000s", "-591852s >= -30000s", "-591404s >= -30000s", "-590689s >= -30000s", "-590189s >= -30000s", "-590028s >= -30000s", "-589845s >= -30000s", "-589714s >= -30000s", "-589551s >= -30000s", "-589399s >= -30000s", "-589273s >= -30000s", "-589152s >= -30000s", "-589037s >= -30000s", "-588912s >= -30000s", "-588781s >= -30000s", "-588666s >= -30000s", "-588441s >= -30000s", "-588306s >= -30000s", "-588193s >= -30000s", "-588056s >= -30000s", "-587687s >= -30000s", "-587556s >= -30000s", "-587368s >= -30000s", "-587241s >= -30000s", "-587072s >= -30000s", "-586847s >= -30000s", "-586707s >= -30000s", "-586585s >= -30000s", "-586472s >= -30000s", "-586346s >= -30000s", "-586196s >= -30000s", "-586005s >= -30000s", "delay time: 922337203685477", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005"]}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   "}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "LOW", "description": ".NET source code contains potential unpacker", "match_data": ["_0001 System.AppDomain.Load(byte[])"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["delay time: 922337203685477", "delay time: 100000", "delay time: 99847", "delay time: 99722", "delay time: 99521", "delay time: 98104", "delay time: 97257", "delay time: 97093", "delay time: 96967", "delay time: 96823", "delay time: 96689", "delay time: 96484", "delay time: 96325", "delay time: 96204", "delay time: 96084", "delay time: 95963", "delay time: 95857", "delay time: 95596", "delay time: 95478", "delay time: 95092", "delay time: 94972", "delay time: 94441", "delay time: 93099", "delay time: 92879", "delay time: 92763", "delay time: 92386", "delay time: 92245", "delay time: 92129", "delay time: 92001", "delay time: 91778", "delay time: 91423", "delay time: 91169", "delay time: 91026", "delay time: 90670", "delay time: 90469", "delay time: 90294", "delay time: 89939", "delay time: 89544", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005", "28A0000 memory reserve | memory write watch", "2A00000 memory reserve | memory write watch", "4A00000 memory reserve | memory write watch", "7910000 memory reserve | memory write watch", "6FE0000 memory reserve | memory write watch", "2617 > 30", "-3689348814741908s >= -30000s", "-100000s >= -30000s", "-99847s >= -30000s", "-99722s >= -30000s", "-99521s >= -30000s", "-98104s >= -30000s", "-97257s >= -30000s", "-97093s >= -30000s", "-96967s >= -30000s", "-96823s >= -30000s", "-96689s >= -30000s", "-96484s >= -30000s", "-96325s >= -30000s", "-96204s >= -30000s", "-96084s >= -30000s", "252 > 30", "-95963s >= -30000s", "-95857s >= -30000s", "-95596s >= -30000s", "-95478s >= -30000s", "-95092s >= -30000s", "-94972s >= -30000s", "-94441s >= -30000s", "-93099s >= -30000s", "-92879s >= -30000s", "-92763s >= -30000s", "-92386s >= -30000s", "-92245s >= -30000s", "-92129s >= -30000s", "-92001s >= -30000s", "-91778s >= -30000s", "-91423s >= -30000s", "-91169s >= -30000s", "-91026s >= -30000s", "-90670s >= -30000s", "-90469s >= -30000s", "-90294s >= -30000s", "-89939s >= -30000s", "-89544s >= -30000s", "-592320s >= -30000s", "-592092s >= -30000s", "-591852s >= -30000s", "-591404s >= -30000s", "-590689s >= -30000s", "-590189s >= -30000s", "-590028s >= -30000s", "-589845s >= -30000s", "-589714s >= -30000s", "-589551s >= -30000s", "-589399s >= -30000s", "-589273s >= -30000s", "-589152s >= -30000s", "-589037s >= -30000s", "-588912s >= -30000s", "-588781s >= -30000s", "-588666s >= -30000s", "-588441s >= -30000s", "-588306s >= -30000s", "-588193s >= -30000s", "-588056s >= -30000s", "-587687s >= -30000s", "-587556s >= -30000s", "-587368s >= -30000s", "-587241s >= -30000s", "-587072s >= -30000s", "-586847s >= -30000s", "-586707s >= -30000s", "-586585s >= -30000s", "-586472s >= -30000s", "-586346s >= -30000s", "-586196s >= -30000s", "-586005s >= -30000s", "delay time: 922337203685477", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005"]}, {"severity": "INFO", "description": "Allocates memory with a write watch (potentially for evading sandboxes)", "match_data": ["delay time: 922337203685477", "delay time: 100000", "delay time: 99847", "delay time: 99722", "delay time: 99521", "delay time: 98104", "delay time: 97257", "delay time: 97093", "delay time: 96967", "delay time: 96823", "delay time: 96689", "delay time: 96484", "delay time: 96325", "delay time: 96204", "delay time: 96084", "delay time: 95963", "delay time: 95857", "delay time: 95596", "delay time: 95478", "delay time: 95092", "delay time: 94972", "delay time: 94441", "delay time: 93099", "delay time: 92879", "delay time: 92763", "delay time: 92386", "delay time: 92245", "delay time: 92129", "delay time: 92001", "delay time: 91778", "delay time: 91423", "delay time: 91169", "delay time: 91026", "delay time: 90670", "delay time: 90469", "delay time: 90294", "delay time: 89939", "delay time: 89544", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005", "28A0000 memory reserve | memory write watch", "2A00000 memory reserve | memory write watch", "4A00000 memory reserve | memory write watch", "7910000 memory reserve | memory write watch", "6FE0000 memory reserve | memory write watch", "2617 > 30", "-3689348814741908s >= -30000s", "-100000s >= -30000s", "-99847s >= -30000s", "-99722s >= -30000s", "-99521s >= -30000s", "-98104s >= -30000s", "-97257s >= -30000s", "-97093s >= -30000s", "-96967s >= -30000s", "-96823s >= -30000s", "-96689s >= -30000s", "-96484s >= -30000s", "-96325s >= -30000s", "-96204s >= -30000s", "-96084s >= -30000s", "252 > 30", "-95963s >= -30000s", "-95857s >= -30000s", "-95596s >= -30000s", "-95478s >= -30000s", "-95092s >= -30000s", "-94972s >= -30000s", "-94441s >= -30000s", "-93099s >= -30000s", "-92879s >= -30000s", "-92763s >= -30000s", "-92386s >= -30000s", "-92245s >= -30000s", "-92129s >= -30000s", "-92001s >= -30000s", "-91778s >= -30000s", "-91423s >= -30000s", "-91169s >= -30000s", "-91026s >= -30000s", "-90670s >= -30000s", "-90469s >= -30000s", "-90294s >= -30000s", "-89939s >= -30000s", "-89544s >= -30000s", "-592320s >= -30000s", "-592092s >= -30000s", "-591852s >= -30000s", "-591404s >= -30000s", "-590689s >= -30000s", "-590189s >= -30000s", "-590028s >= -30000s", "-589845s >= -30000s", "-589714s >= -30000s", "-589551s >= -30000s", "-589399s >= -30000s", "-589273s >= -30000s", "-589152s >= -30000s", "-589037s >= -30000s", "-588912s >= -30000s", "-588781s >= -30000s", "-588666s >= -30000s", "-588441s >= -30000s", "-588306s >= -30000s", "-588193s >= -30000s", "-588056s >= -30000s", "-587687s >= -30000s", "-587556s >= -30000s", "-587368s >= -30000s", "-587241s >= -30000s", "-587072s >= -30000s", "-586847s >= -30000s", "-586707s >= -30000s", "-586585s >= -30000s", "-586472s >= -30000s", "-586346s >= -30000s", "-586196s >= -30000s", "-586005s >= -30000s", "delay time: 922337203685477", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["delay time: 922337203685477", "delay time: 100000", "delay time: 99847", "delay time: 99722", "delay time: 99521", "delay time: 98104", "delay time: 97257", "delay time: 97093", "delay time: 96967", "delay time: 96823", "delay time: 96689", "delay time: 96484", "delay time: 96325", "delay time: 96204", "delay time: 96084", "delay time: 95963", "delay time: 95857", "delay time: 95596", "delay time: 95478", "delay time: 95092", "delay time: 94972", "delay time: 94441", "delay time: 93099", "delay time: 92879", "delay time: 92763", "delay time: 92386", "delay time: 92245", "delay time: 92129", "delay time: 92001", "delay time: 91778", "delay time: 91423", "delay time: 91169", "delay time: 91026", "delay time: 90670", "delay time: 90469", "delay time: 90294", "delay time: 89939", "delay time: 89544", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005", "28A0000 memory reserve | memory write watch", "2A00000 memory reserve | memory write watch", "4A00000 memory reserve | memory write watch", "7910000 memory reserve | memory write watch", "6FE0000 memory reserve | memory write watch", "2617 > 30", "-3689348814741908s >= -30000s", "-100000s >= -30000s", "-99847s >= -30000s", "-99722s >= -30000s", "-99521s >= -30000s", "-98104s >= -30000s", "-97257s >= -30000s", "-97093s >= -30000s", "-96967s >= -30000s", "-96823s >= -30000s", "-96689s >= -30000s", "-96484s >= -30000s", "-96325s >= -30000s", "-96204s >= -30000s", "-96084s >= -30000s", "252 > 30", "-95963s >= -30000s", "-95857s >= -30000s", "-95596s >= -30000s", "-95478s >= -30000s", "-95092s >= -30000s", "-94972s >= -30000s", "-94441s >= -30000s", "-93099s >= -30000s", "-92879s >= -30000s", "-92763s >= -30000s", "-92386s >= -30000s", "-92245s >= -30000s", "-92129s >= -30000s", "-92001s >= -30000s", "-91778s >= -30000s", "-91423s >= -30000s", "-91169s >= -30000s", "-91026s >= -30000s", "-90670s >= -30000s", "-90469s >= -30000s", "-90294s >= -30000s", "-89939s >= -30000s", "-89544s >= -30000s", "-592320s >= -30000s", "-592092s >= -30000s", "-591852s >= -30000s", "-591404s >= -30000s", "-590689s >= -30000s", "-590189s >= -30000s", "-590028s >= -30000s", "-589845s >= -30000s", "-589714s >= -30000s", "-589551s >= -30000s", "-589399s >= -30000s", "-589273s >= -30000s", "-589152s >= -30000s", "-589037s >= -30000s", "-588912s >= -30000s", "-588781s >= -30000s", "-588666s >= -30000s", "-588441s >= -30000s", "-588306s >= -30000s", "-588193s >= -30000s", "-588056s >= -30000s", "-587687s >= -30000s", "-587556s >= -30000s", "-587368s >= -30000s", "-587241s >= -30000s", "-587072s >= -30000s", "-586847s >= -30000s", "-586707s >= -30000s", "-586585s >= -30000s", "-586472s >= -30000s", "-586346s >= -30000s", "-586196s >= -30000s", "-586005s >= -30000s", "delay time: 922337203685477", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["delay time: 922337203685477", "delay time: 100000", "delay time: 99847", "delay time: 99722", "delay time: 99521", "delay time: 98104", "delay time: 97257", "delay time: 97093", "delay time: 96967", "delay time: 96823", "delay time: 96689", "delay time: 96484", "delay time: 96325", "delay time: 96204", "delay time: 96084", "delay time: 95963", "delay time: 95857", "delay time: 95596", "delay time: 95478", "delay time: 95092", "delay time: 94972", "delay time: 94441", "delay time: 93099", "delay time: 92879", "delay time: 92763", "delay time: 92386", "delay time: 92245", "delay time: 92129", "delay time: 92001", "delay time: 91778", "delay time: 91423", "delay time: 91169", "delay time: 91026", "delay time: 90670", "delay time: 90469", "delay time: 90294", "delay time: 89939", "delay time: 89544", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005", "28A0000 memory reserve | memory write watch", "2A00000 memory reserve | memory write watch", "4A00000 memory reserve | memory write watch", "7910000 memory reserve | memory write watch", "6FE0000 memory reserve | memory write watch", "2617 > 30", "-3689348814741908s >= -30000s", "-100000s >= -30000s", "-99847s >= -30000s", "-99722s >= -30000s", "-99521s >= -30000s", "-98104s >= -30000s", "-97257s >= -30000s", "-97093s >= -30000s", "-96967s >= -30000s", "-96823s >= -30000s", "-96689s >= -30000s", "-96484s >= -30000s", "-96325s >= -30000s", "-96204s >= -30000s", "-96084s >= -30000s", "252 > 30", "-95963s >= -30000s", "-95857s >= -30000s", "-95596s >= -30000s", "-95478s >= -30000s", "-95092s >= -30000s", "-94972s >= -30000s", "-94441s >= -30000s", "-93099s >= -30000s", "-92879s >= -30000s", "-92763s >= -30000s", "-92386s >= -30000s", "-92245s >= -30000s", "-92129s >= -30000s", "-92001s >= -30000s", "-91778s >= -30000s", "-91423s >= -30000s", "-91169s >= -30000s", "-91026s >= -30000s", "-90670s >= -30000s", "-90469s >= -30000s", "-90294s >= -30000s", "-89939s >= -30000s", "-89544s >= -30000s", "-592320s >= -30000s", "-592092s >= -30000s", "-591852s >= -30000s", "-591404s >= -30000s", "-590689s >= -30000s", "-590189s >= -30000s", "-590028s >= -30000s", "-589845s >= -30000s", "-589714s >= -30000s", "-589551s >= -30000s", "-589399s >= -30000s", "-589273s >= -30000s", "-589152s >= -30000s", "-589037s >= -30000s", "-588912s >= -30000s", "-588781s >= -30000s", "-588666s >= -30000s", "-588441s >= -30000s", "-588306s >= -30000s", "-588193s >= -30000s", "-588056s >= -30000s", "-587687s >= -30000s", "-587556s >= -30000s", "-587368s >= -30000s", "-587241s >= -30000s", "-587072s >= -30000s", "-586847s >= -30000s", "-586707s >= -30000s", "-586585s >= -30000s", "-586472s >= -30000s", "-586346s >= -30000s", "-586196s >= -30000s", "-586005s >= -30000s", "delay time: 922337203685477", "delay time: 592320", "delay time: 592092", "delay time: 591852", "delay time: 591404", "delay time: 590689", "delay time: 590189", "delay time: 590028", "delay time: 589845", "delay time: 589714", "delay time: 589551", "delay time: 589399", "delay time: 589273", "delay time: 589152", "delay time: 589037", "delay time: 588912", "delay time: 588781", "delay time: 588666", "delay time: 588441", "delay time: 588306", "delay time: 588193", "delay time: 588056", "delay time: 587687", "delay time: 587556", "delay time: 587368", "delay time: 587241", "delay time: 587072", "delay time: 586847", "delay time: 586707", "delay time: 586585", "delay time: 586472", "delay time: 586346", "delay time: 586196", "delay time: 586005"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "LOW", "description": "Tries to detect sandboxes and other dynamic analysis tools", "match_data": ["SBIEDLL.DLLL", "Microsoft|VMWare|VirtualL", "VMware|VIRTUAL|A M I|XenL", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll"]}, {"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["SBIEDLL.DLLL", "Microsoft|VMWare|VirtualL", "VMware|VIRTUAL|A M I|XenL", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll"]}]}, {"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "INFO", "description": "Sample monitors Window changes (e.g. starting applications), analyze the sample with the simulation cookbook"}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "Reads ini files", "match_data": ["C:\\Users\\user\\Desktop\\desktop.ini"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\Users\\user\\Desktop\\file.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\Users\\user\\Desktop\\file.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\Users\\user\\Desktop\\file.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation"]}]}, {"id": "T1016", "name": "System Network Configuration Discovery", "link": "https://attack.mitre.org/techniques/T1016/", "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface). On ESXi, adversaries may leverage esxcli to gather network configuration information. For example, the command esxcli network nic list will retrieve the MAC address, while esxcli network ip interface ipv4 get will retrieve the local IPv4 address.\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ", "signatures": [{"severity": "LOW", "description": "Checks the online ip address of the machine", "match_data": ["name: ip-api.com"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1573", "name": "Encrypted Channel", "link": "https://attack.mitre.org/techniques/T1573/", "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "signatures": [{"severity": "INFO", "description": "Uses HTTPS", "match_data": ["HTTP traffic on port 49709 -> 443", "HTTP traffic on port 49710 -> 443", "HTTP traffic on port 443 -> 49710", "HTTP traffic on port 443 -> 49721", "HTTP traffic on port 443 -> 49720", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 49720 -> 443", "HTTP traffic on port 443 -> 49709"]}, {"severity": "INFO", "description": "Uses HTTPS for network communication, use the SSL MITM Proxy cookbook for further analysis", "match_data": ["HTTP traffic on port 49709 -> 443", "HTTP traffic on port 49710 -> 443", "HTTP traffic on port 443 -> 49710", "HTTP traffic on port 443 -> 49721", "HTTP traffic on port 443 -> 49720", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 49720 -> 443", "HTTP traffic on port 443 -> 49709"]}]}, {"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: c.pki.goog", "DNS query: drive.google.com", "DNS query: drive.usercontent.google.com", "DNS query: windows.msn.com", "DNS query: ip-api.com", "DNS query: mail.xma0.com"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: c.pki.goog", "DNS query: drive.google.com", "DNS query: drive.usercontent.google.com", "DNS query: windows.msn.com", "DNS query: ip-api.com", "DNS query: mail.xma0.com", "HTTP traffic on port 49709 -> 443", "HTTP traffic on port 49710 -> 443", "HTTP traffic on port 443 -> 49710", "HTTP traffic on port 443 -> 49721", "HTTP traffic on port 443 -> 49720", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 49720 -> 443", "HTTP traffic on port 443 -> 49709"]}, {"severity": "INFO", "description": "Uses HTTPS", "match_data": ["DNS query: c.pki.goog", "DNS query: drive.google.com", "DNS query: drive.usercontent.google.com", "DNS query: windows.msn.com", "DNS query: ip-api.com", "DNS query: mail.xma0.com", "HTTP traffic on port 49709 -> 443", "HTTP traffic on port 49710 -> 443", "HTTP traffic on port 443 -> 49710", "HTTP traffic on port 443 -> 49721", "HTTP traffic on port 443 -> 49720", "HTTP traffic on port 49721 -> 443", "HTTP traffic on port 49720 -> 443", "HTTP traffic on port 443 -> 49709"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/031a3caa1b011bdc8902efb7eafa8cb572d9fc142da73dc54d5817877f47cc74/behaviour_mitre_trees"}}