{"data": {"CAPA": {"tactics": [{"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture)."}, {"id": "T1056.001", "name": "Keylogging", "link": "https://attack.mitre.org/techniques/T1056/001/", "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\nHooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\nReading raw keystroke data from the hardware buffer.\nWindows Registry modifications.\nCustom drivers.\nModify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions. \n", "signatures": [{"severity": "INFO", "description": "log keystrokes via polling"}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture)."}, {"id": "T1056.001", "name": "Keylogging", "link": "https://attack.mitre.org/techniques/T1056/001/", "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\nHooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\nReading raw keystroke data from the hardware buffer.\nWindows Registry modifications.\nCustom drivers.\nModify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions. \n", "signatures": [{"severity": "INFO", "description": "log keystrokes via polling"}]}, {"id": "T1113", "name": "Screen Capture", "link": "https://attack.mitre.org/techniques/T1113/", "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.", "signatures": [{"severity": "INFO", "description": "capture screenshot"}]}, {"id": "T1125", "name": "Video Capture", "link": "https://attack.mitre.org/techniques/T1125/", "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. ", "signatures": [{"severity": "INFO", "description": "capture webcam image"}]}, {"id": "T1115", "name": "Clipboard Data", "link": "https://attack.mitre.org/techniques/T1115/", "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \nFor example, on Windows adversaries can access clipboard data by using clip.exe or Get-Clipboard. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\nmacOS and Linux also have commands, such as pbpaste, to grab clipboard contents.", "signatures": [{"severity": "INFO", "description": "read clipboard data"}, {"severity": "INFO", "description": "open clipboard"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "encrypt data using RC4 KSA"}, {"severity": "INFO", "description": "encode data using XOR"}, {"severity": "INFO", "description": "encrypt data using RC4 PRGA"}, {"severity": "INFO", "description": "reference Base64 string"}, {"severity": "INFO", "description": "encrypt data using DES"}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "INFO", "description": "packed with generic packer"}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Parallels"}, {"severity": "INFO", "description": "reference anti-VM strings targeting VMWare"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Qemu"}, {"severity": "INFO", "description": "reference anti-VM strings"}, {"severity": "INFO", "description": "reference anti-VM strings targeting VirtualBox"}]}, {"id": "T1027.005", "name": "Indicator Removal from Tools", "link": "https://attack.mitre.org/techniques/T1027/005/", "description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.", "signatures": [{"severity": "INFO", "description": "contain obfuscated stackstrings"}]}, {"id": "T1222", "name": "File and Directory Permissions Modification", "link": "https://attack.mitre.org/techniques/T1222/", "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths. ", "signatures": [{"severity": "INFO", "description": "set file attributes"}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "INFO", "description": "get kernel32 base address"}, {"severity": "INFO", "description": "access PEB ldr_data"}, {"severity": "INFO", "description": "link function at runtime on Windows"}, {"severity": "INFO", "description": "link many functions at runtime"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "enumerate files on Windows"}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Parallels"}, {"severity": "INFO", "description": "reference anti-VM strings targeting VMWare"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Qemu"}, {"severity": "INFO", "description": "reference anti-VM strings"}, {"severity": "INFO", "description": "reference anti-VM strings targeting VirtualBox"}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "get number of processors"}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "get process heap flags"}]}, {"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "INFO", "description": "query or enumerate registry value"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1014", "name": "Rootkit", "link": "https://attack.mitre.org/techniques/T1014/", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components."}]}, {"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system."}]}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}, {"id": "T1564", "name": "Hide Artifacts", "link": "https://attack.mitre.org/techniques/T1564/", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection."}]}, {"id": "T1202", "name": "Indirect Command Execution", "link": "https://attack.mitre.org/techniques/T1202/", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), Scriptrunner.exe, as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts. Adversaries may also abuse the ssh.exe binary to execute malicious commands via the ProxyCommand and LocalCommand options, which can be invoked via the -o flag or by modifying the SSH config file.\nAdversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters."}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution."}]}, {"id": "T1064", "name": "Scripting", "link": "https://attack.mitre.org/techniques/T1064/", "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ", "signatures": [{"severity": "UNKNOWN", "description": "**This technique has been deprecated."}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."}]}, {"id": "T1564.001", "name": "Hidden Files and Directories", "link": "https://attack.mitre.org/techniques/T1564/001/", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system."}]}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution."}]}, {"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."}]}, {"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."}]}, {"id": "T1547.001", "name": "Registry Run Keys / Startup Folder", "link": "https://attack.mitre.org/techniques/T1547/001/", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key."}]}, {"id": "T1547.006", "name": "Kernel Modules and Extensions", "link": "https://attack.mitre.org/techniques/T1547/006/", "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.\u00a0\nWhen used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0).\u00a0Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.\nAdversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may modify the kernel to automatically execute programs on system boot."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."}]}, {"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."}]}, {"id": "T1547.001", "name": "Registry Run Keys / Startup Folder", "link": "https://attack.mitre.org/techniques/T1547/001/", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key."}]}, {"id": "T1547.006", "name": "Kernel Modules and Extensions", "link": "https://attack.mitre.org/techniques/T1547/006/", "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.\u00a0\nWhen used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0).\u00a0Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.\nAdversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may modify the kernel to automatically execute programs on system boot."}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1064", "name": "Scripting", "link": "https://attack.mitre.org/techniques/T1064/", "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ", "signatures": [{"severity": "UNKNOWN", "description": "**This technique has been deprecated."}]}, {"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to get information about running processes on a system."}]}, {"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software."}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1539", "name": "Steal Web Session Cookie", "link": "https://attack.mitre.org/techniques/T1539/", "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.\nThere are several examples of malware targeting cookies from web browsers on the local system. Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on User Execution by tricking victims into running malicious JavaScript in their browser.\nThere are also open source frameworks such as Evilginx2 and Muraena that can gather session cookies through a malicious proxy (e.g., Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.\nAfter an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0040", "name": "Impact", "link": "https://attack.mitre.org/tactics/TA0040/", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "techniques": [{"id": "T1496", "name": "Resource Hijacking", "link": "https://attack.mitre.org/techniques/T1496/", "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \nResource hijacking may take a number of different forms. For example, adversaries may:\n\nLeverage compute resources in order to mine cryptocurrency\nSell network bandwidth to proxy networks\nGenerate SMS traffic for profit\nAbuse cloud-based messaging services to send large quantities of spam messages\n\nIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1198", "name": "SIP and Trust Provider Hijacking", "link": "https://attack.mitre.org/techniques/T1198/", "description": "In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: \n\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\nModifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\nNote: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an Authenticode signature"}, {"severity": "UNKNOWN", "description": "The file have a Trusted Certificate"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1198", "name": "SIP and Trust Provider Hijacking", "link": "https://attack.mitre.org/techniques/T1198/", "description": "In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: \n\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\nModifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\nNote: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an Authenticode signature"}, {"severity": "UNKNOWN", "description": "The file have a Trusted Certificate"}]}, {"id": "T1564", "name": "Hide Artifacts", "link": "https://attack.mitre.org/techniques/T1564/", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology."}, {"id": "T1564.003", "name": "Hidden Window", "link": "https://attack.mitre.org/techniques/T1564/003/", "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden.\nThe Windows Registry can also be edited to hide application windows from the current user. For example, by setting the WindowPosition subkey in the HKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exe Registry key to a maximum value, PowerShell windows will open off screen and be hidden.\nIn addition, Windows supports the CreateDesktop() API that can create a hidden desktop window with its own corresponding explorer.exe process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Find Crypto"}, {"severity": "UNKNOWN", "description": "Manalize Local SandBox Strings"}, {"severity": "UNKNOWN", "description": "The binary presents some anomalies in its PE header and/or PE sections."}, {"severity": "UNKNOWN", "description": "The file contains some common ransomware-related keywords."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Find Crypto"}, {"severity": "UNKNOWN", "description": "Manalize Local SandBox Strings"}, {"severity": "UNKNOWN", "description": "The binary presents some anomalies in its PE header and/or PE sections."}, {"severity": "UNKNOWN", "description": "The file contains some common ransomware-related keywords."}]}, {"id": "T1116", "name": "Code Signing", "link": "https://attack.mitre.org/techniques/T1116/", "description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries . The certificates used during an operation may be created, forged, or stolen by the adversary.  \nCode signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. \nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an invalid Authenticode signature."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Find Crypto"}, {"severity": "UNKNOWN", "description": "Manalize Local SandBox Strings"}, {"severity": "UNKNOWN", "description": "The binary presents some anomalies in its PE header and/or PE sections."}, {"severity": "UNKNOWN", "description": "The file contains some common ransomware-related keywords."}]}, {"id": "T1033", "name": "System Owner/User Discovery", "link": "https://attack.mitre.org/techniques/T1033/", "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nVarious utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.\nOn network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Find Crypto"}, {"severity": "UNKNOWN", "description": "Manalize Local SandBox Strings"}, {"severity": "UNKNOWN", "description": "The binary presents some anomalies in its PE header and/or PE sections."}, {"severity": "UNKNOWN", "description": "The file contains some common ransomware-related keywords."}]}, {"id": "T1087", "name": "Account Discovery", "link": "https://attack.mitre.org/techniques/T1087/", "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Find Crypto"}, {"severity": "UNKNOWN", "description": "Manalize Local SandBox Strings"}, {"severity": "UNKNOWN", "description": "The binary presents some anomalies in its PE header and/or PE sections."}, {"severity": "UNKNOWN", "description": "The file contains some common ransomware-related keywords."}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Find Crypto"}, {"severity": "UNKNOWN", "description": "Manalize Local SandBox Strings"}, {"severity": "UNKNOWN", "description": "The binary presents some anomalies in its PE header and/or PE sections."}, {"severity": "UNKNOWN", "description": "The file contains some common ransomware-related keywords."}]}, {"id": "T1063", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1063/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nWindows\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\nMac\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.", "signatures": [{"severity": "UNKNOWN", "description": "It Tries to detect injection methods"}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Find Crypto"}, {"severity": "UNKNOWN", "description": "Manalize Local SandBox Strings"}, {"severity": "UNKNOWN", "description": "The binary presents some anomalies in its PE header and/or PE sections."}, {"severity": "UNKNOWN", "description": "The file contains some common ransomware-related keywords."}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "UNKNOWN", "description": "Apparent Internal Usage of CMD.EXE"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1064", "name": "Scripting", "link": "https://attack.mitre.org/techniques/T1064/", "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ", "signatures": [{"severity": "INFO", "description": "Executes batch files", "match_data": ["C:\\Windows\\SysWOW64\\cmd.exe C:\\Windows\\system32\\cmd.exe /c C:\\Windows\\System32\\\\Delete00.bat"]}]}, {"id": "T1569", "name": "System Services", "link": "https://attack.mitre.org/techniques/T1569/", "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution."}, {"id": "T1569.002", "name": "Service Execution", "link": "https://attack.mitre.org/techniques/T1569/002/", "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.", "signatures": [{"severity": "INFO", "description": "Uses sc.exe to modify the status of services", "match_data": ["C:\\Windows\\SysWOW64\\sc.exe sc failure FastUserSwitchingCompatibility reset= 86400 actions= restart/1000"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1064", "name": "Scripting", "link": "https://attack.mitre.org/techniques/T1064/", "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ", "signatures": [{"severity": "INFO", "description": "Executes batch files", "match_data": ["C:\\Windows\\SysWOW64\\cmd.exe C:\\Windows\\system32\\cmd.exe /c C:\\Windows\\System32\\\\Delete00.bat"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "winmm.dll", "uxtheme.dll", "kernel.appcore.dll", "windows.storage.dll", "wintypes.dll", "cryptsp.dll", "rsaenh.dll", "sspicli.dll", "cryptbase.dll", "bcrypt.dll", "propsys.dll", "windows.system.launcher.dll", "msvcp110_win.dll", "windows.staterepositorycore.dll", "profapi.dll", "cfgmgr32.dll", "twext.dll", "ntshrui.dll", "twinapi.appcore.dll", "windows.staterepositoryps.dll", "windows.fileexplorer.common.dll", "textshaping.dll", "appresolver.dll", "userenv.dll", "srvcli.dll", "cscapi.dll", "netutils.dll", "shacct.dll", "secur32.dll", "version.dll", "wininet.dll", "wtsapi32.dll", "idstore.dll", "samlib.dll", "edputil.dll", "urlmon.dll", "iertutil.dll", "wlidprov.dll", "virtdisk.dll", "napinsp.dll", "pnrpnsp.dll", "mswsock.dll", "dnsapi.dll", "iphlpapi.dll", "winrnr.dll", "wshbth.dll", "nlansp_c.dll", "msimg32.dll", "dwmapi.dll", "cmdext.dll", "appidapi.dll", "srpapi.dll", "winnsi.dll"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Drops PE files to the windows directory (C:\\\\Windows)", "match_data": ["C:\\Windows\\Temp\\vcruntime140d.dll", "C:\\Windows\\Temp\\vcruntime140_1d.dll", "C:\\Windows\\Temp\\ucrtbased.dll", "C:\\Windows\\Temp\\msvcp140d.dll", "C:\\ProgramData\\Microsoft\\Windows\\GameExplorer\\Remote.hlp", "C:\\Windows\\SysWOW64\\Delete00.bat", "C:\\Users\\user\\Documents\\conf.ini"]}, {"severity": "INFO", "description": "Drops files with a non matching file extension (content does not match to file extension)", "match_data": ["C:\\Windows\\Temp\\vcruntime140d.dll", "C:\\Windows\\Temp\\vcruntime140_1d.dll", "C:\\Windows\\Temp\\ucrtbased.dll", "C:\\Windows\\Temp\\msvcp140d.dll", "C:\\ProgramData\\Microsoft\\Windows\\GameExplorer\\Remote.hlp", "C:\\Windows\\SysWOW64\\Delete00.bat", "C:\\Users\\user\\Documents\\conf.ini"]}, {"severity": "INFO", "description": "Creates files inside the system directory", "match_data": ["C:\\Windows\\Temp\\vcruntime140d.dll", "C:\\Windows\\Temp\\vcruntime140_1d.dll", "C:\\Windows\\Temp\\ucrtbased.dll", "C:\\Windows\\Temp\\msvcp140d.dll", "C:\\ProgramData\\Microsoft\\Windows\\GameExplorer\\Remote.hlp", "C:\\Windows\\SysWOW64\\Delete00.bat", "C:\\Users\\user\\Documents\\conf.ini"]}, {"severity": "INFO", "description": "Creates files inside the user directory", "match_data": ["C:\\Windows\\Temp\\vcruntime140d.dll", "C:\\Windows\\Temp\\vcruntime140_1d.dll", "C:\\Windows\\Temp\\ucrtbased.dll", "C:\\Windows\\Temp\\msvcp140d.dll", "C:\\ProgramData\\Microsoft\\Windows\\GameExplorer\\Remote.hlp", "C:\\Windows\\SysWOW64\\Delete00.bat", "C:\\Users\\user\\Documents\\conf.ini"]}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "Uses reg.exe to modify the Windows registry", "match_data": ["C:\\Windows\\System32\\reg.exe reg  query \"hklm\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v netsvcs"]}]}, {"id": "T1070", "name": "Indicator Removal", "link": "https://attack.mitre.org/techniques/T1070/", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred."}, {"id": "T1070.006", "name": "Timestomp", "link": "https://attack.mitre.org/techniques/T1070/006/", "description": "Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.\nIn Windows systems, both the $STANDARD_INFORMATION ($SI) and $FILE_NAME ($FN) attributes record times in a Master File Table (MFT) file. $SI (dates/time stamps) is displayed to the end user, including in the File System view, while $FN is dealt with by the kernel.\nModifying the $SI attribute is the most common method of timestomping because it can be modified at the user level using API calls. $FN timestomping, however, typically requires interacting with the system kernel or moving or renaming a file.\nAdversaries modify timestamps on files so that they do not appear conspicuous to forensic investigators or file analysis tools. In order to evade detections that rely on identifying discrepancies between the $SI and $FN attributes, adversaries may also engage in \u201cdouble timestomping\u201d by modifying times on both attributes simultaneously.\nIn Linux systems and on ESXi servers, threat actors may attempt to perform timestomping using commands such as touch -a -m -t <timestamp> <filename> (which sets access and modification times to a specific value) or touch -r <filename> <filename> (which sets access and modification times to match those of another file).\nTimestomping may be used along with file name Masquerading to hide malware and tools.", "signatures": [{"severity": "INFO", "description": "Binary contains a suspicious time stamp", "match_data": ["0xA4CC7AB0 [Sun Aug 12 17:49:36 2057 UTC]"]}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1543", "name": "Create or Modify System Process", "link": "https://attack.mitre.org/techniques/T1543/", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.  "}, {"id": "T1543.003", "name": "Windows Service", "link": "https://attack.mitre.org/techniques/T1543/003/", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.", "signatures": [{"severity": "INFO", "description": "Creates driver files", "match_data": ["C:\\2.sys", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\FastUserSwitchingCompatibility", "C:\\Windows\\SysWOW64\\sc.exe sc failure FastUserSwitchingCompatibility reset= 86400 actions= restart/1000"]}, {"severity": "INFO", "description": "Creates or modifies windows services", "match_data": ["C:\\2.sys", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\FastUserSwitchingCompatibility", "C:\\Windows\\SysWOW64\\sc.exe sc failure FastUserSwitchingCompatibility reset= 86400 actions= restart/1000"]}, {"severity": "INFO", "description": "Uses sc.exe to modify the status of services", "match_data": ["C:\\2.sys", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\FastUserSwitchingCompatibility", "C:\\Windows\\SysWOW64\\sc.exe sc failure FastUserSwitchingCompatibility reset= 86400 actions= restart/1000"]}]}, {"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges."}, {"id": "T1547.008", "name": "LSASS Driver", "link": "https://attack.mitre.org/techniques/T1547/008/", "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.", "signatures": [{"severity": "INFO", "description": "Spawns drivers", "match_data": ["\\Registry\\Machine\\System\\CurrentControlSet\\pUezIeeYN", "Load Driver"]}, {"severity": "INFO", "description": "Enables driver privileges", "match_data": ["\\Registry\\Machine\\System\\CurrentControlSet\\pUezIeeYN", "Load Driver"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "winmm.dll", "uxtheme.dll", "kernel.appcore.dll", "windows.storage.dll", "wintypes.dll", "cryptsp.dll", "rsaenh.dll", "sspicli.dll", "cryptbase.dll", "bcrypt.dll", "propsys.dll", "windows.system.launcher.dll", "msvcp110_win.dll", "windows.staterepositorycore.dll", "profapi.dll", "cfgmgr32.dll", "twext.dll", "ntshrui.dll", "twinapi.appcore.dll", "windows.staterepositoryps.dll", "windows.fileexplorer.common.dll", "textshaping.dll", "appresolver.dll", "userenv.dll", "srvcli.dll", "cscapi.dll", "netutils.dll", "shacct.dll", "secur32.dll", "version.dll", "wininet.dll", "wtsapi32.dll", "idstore.dll", "samlib.dll", "edputil.dll", "urlmon.dll", "iertutil.dll", "wlidprov.dll", "virtdisk.dll", "napinsp.dll", "pnrpnsp.dll", "mswsock.dll", "dnsapi.dll", "iphlpapi.dll", "winrnr.dll", "wshbth.dll", "nlansp_c.dll", "msimg32.dll", "dwmapi.dll", "cmdext.dll", "appidapi.dll", "srpapi.dll", "winnsi.dll"]}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "Uses reg.exe to modify the Windows registry", "match_data": ["C:\\Windows\\System32\\reg.exe reg  query \"hklm\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v netsvcs"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1543", "name": "Create or Modify System Process", "link": "https://attack.mitre.org/techniques/T1543/", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.  "}, {"id": "T1543.003", "name": "Windows Service", "link": "https://attack.mitre.org/techniques/T1543/003/", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.", "signatures": [{"severity": "INFO", "description": "Creates driver files", "match_data": ["C:\\2.sys", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\FastUserSwitchingCompatibility", "C:\\Windows\\SysWOW64\\sc.exe sc failure FastUserSwitchingCompatibility reset= 86400 actions= restart/1000"]}, {"severity": "INFO", "description": "Creates or modifies windows services", "match_data": ["C:\\2.sys", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\FastUserSwitchingCompatibility", "C:\\Windows\\SysWOW64\\sc.exe sc failure FastUserSwitchingCompatibility reset= 86400 actions= restart/1000"]}, {"severity": "INFO", "description": "Uses sc.exe to modify the status of services", "match_data": ["C:\\2.sys", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\FastUserSwitchingCompatibility", "C:\\Windows\\SysWOW64\\sc.exe sc failure FastUserSwitchingCompatibility reset= 86400 actions= restart/1000"]}]}, {"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges."}, {"id": "T1547.008", "name": "LSASS Driver", "link": "https://attack.mitre.org/techniques/T1547/008/", "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.", "signatures": [{"severity": "INFO", "description": "Spawns drivers", "match_data": ["\\Registry\\Machine\\System\\CurrentControlSet\\pUezIeeYN", "Load Driver"]}, {"severity": "INFO", "description": "Enables driver privileges", "match_data": ["\\Registry\\Machine\\System\\CurrentControlSet\\pUezIeeYN", "Load Driver"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "winmm.dll", "uxtheme.dll", "kernel.appcore.dll", "windows.storage.dll", "wintypes.dll", "cryptsp.dll", "rsaenh.dll", "sspicli.dll", "cryptbase.dll", "bcrypt.dll", "propsys.dll", "windows.system.launcher.dll", "msvcp110_win.dll", "windows.staterepositorycore.dll", "profapi.dll", "cfgmgr32.dll", "twext.dll", "ntshrui.dll", "twinapi.appcore.dll", "windows.staterepositoryps.dll", "windows.fileexplorer.common.dll", "textshaping.dll", "appresolver.dll", "userenv.dll", "srvcli.dll", "cscapi.dll", "netutils.dll", "shacct.dll", "secur32.dll", "version.dll", "wininet.dll", "wtsapi32.dll", "idstore.dll", "samlib.dll", "edputil.dll", "urlmon.dll", "iertutil.dll", "wlidprov.dll", "virtdisk.dll", "napinsp.dll", "pnrpnsp.dll", "mswsock.dll", "dnsapi.dll", "iphlpapi.dll", "winrnr.dll", "wshbth.dll", "nlansp_c.dll", "msimg32.dll", "dwmapi.dll", "cmdext.dll", "appidapi.dll", "srpapi.dll", "winnsi.dll"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["@&!*@*@(msg.vmx.ulm.unsupported)Your host does not meet minimum requirements to run %s with Hyper-V or Device/Credential Guard enabled. Refer to VMware KB article 76918 at https://kb.vmware.com/kb/769", "HGFSSetTagsVMDBWork", "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02xVMWare%s NVME_000%unvme%unvme.winDefaultNvme103NVMECreateControllerNVME-CORE: %s: Failed to allocate mem IO space in VMM", "VMware Virtual SCSI CDROM DriveGET PERFORMANCEREAD DISC INFORMATIONRESERVE TRACKSET READ AHEADSEND DVD STRUCTUREPREVENT ALLOW MEDIUM REMOVALREAD SUBCHANNELREAD BUFFER CAPACITYCLOSE SESSIONCDROM %s: CM", "HGFS_Purge", "hgfsServerSet", "Hyper-V guest: management OS identified as 0x%08x:0x%08x.", "@&!*@*@(msg.gostable8.guest.vmkernel6)VMware ESXi 6.0", "hgfs.redirectShellFolder%d.enabled", "HGFS_SetExpiration", "bora\\lib\\hgfsServer\\hgfsServer.cHgfsServerGetLocalNameInfo%s: error: prefix too long", "AsyncVmciSocket.sendBuf", "HGFS_Purge/in/shareLabel", "\\\\.\\pipe\\vmware\\mksSandbox\\mksSandbox-%s", "isolation.tools.vmdebug.disable", "vmware.log", "HGFSSetEnabledVMDBWork", "VMMouse: No space in queue for READ_ID?!", "VMMon: Unable to create vmci event", "VMWARE_B2B", "vmware vmm", "VMware, Inc.1#0!", "VMCI QueuePair: Couldn't inform guest about resume event.", "vmdebug", "vmmouseEnabled", "HGFSAttach", "HGFSSetExpirationVMDBWork", "VMCI: Couldn't inform about context id.", "@&!*@*@(msg.gostable.family.esx)VMware ESX", "vmci0.pxm", "HGFSSetExpiration", "bora\\vmx\\main\\hgfsServerManagerHost.c", "VMMon_RememberkHzEstimateIOCTL_VMX86_SYNC_GET_TSCS failed: %s", "ToolsBackup: Writeable snapshot epoch for '%s' too large. (%I64u vs %I64u). Incremental backups might be inconsistent (please report to VMware", "HGFSSetPresentVTProcess", "falmaLinuxamazonlinuxarm-almaLinuxarm-CRXPodarm-CRXSysarm-debianarm-Fedoraarm-freeBSDarm-otherarm-other5xlinuxarm-other6xlinuxarm-other7xlinuxarm-rhelarm-rockyLinuxarm-ubuntuarm-vmkernelarm-vmware-pho", "VMCINUMQPS", "VNET: MACVNetPort_Connect: %s: vmnet driver version does not match, expected %d, found %d", "\\\\.\\Global\\vmx86", "@&!*@*@(msg.foundryErrMsgId.VIX_E_MNTAPI_CANT_MAKE_VAR_DIR)Cannot create directory '/var/run/vmware/fuse'", "VMCI: Failed to restore datagram buffer from checkpoint", "9pfsabsMouseCommandabsMouseDataabsMouseRestrictabsMouseStatusabsoluteMouseCheckacpiHotplugCPURequestacpiHotplugDeviceRequestacpiHotplugMemoryRequestacpiHotplugRequestamqpBackdoorTransportapmFunctionap", "VMCI QueuePair: Already attached to queue pair (handle=0x%x:0x%x)", "VMXVmdb_GetHgfsServerEnabled", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_INSTALL_IN_PROGRESS)A VMware Tools installation is already in progress", "HgfsChannelVmciRecvMsgCB", "TDX: Unsupported VMware TDG.VP.VMCALL sub-function: %#lx", "val/initiated/customPathval/initiated/prompt@&!*@*@(msg.vmxvmdbCb.startInstallTools.windows)%s will now attach the VMware Tools CD-ROM image to your virtual machine.", "VMCI_Put", "hgfs.packetSize.largeguest_rpc.auditLogs[binary][none]destinationsourceoutgoingincomingGuestRpc: protocol %s, channel %u: %s data, %s %s, payload start = '%s'", "HgfsSharedMemoryLockbora\\vmx\\main\\hgfsServerManagerHost.cisolation.tools.hgfs.disableHgfsServerManager_ChangeState%s: Failed to register the HGFS server.", "HgfsSearchArrayLock", "ble5Sistema de archivos desconocido. Contactar con VMware", "Global\\__VMware-%s", "VMCI_RegMemHandler.cold", "dev/#class/nic/addressTypeclass/nic/addressMACUpdateVMDBVMnet/dev/vmnetBridgedVMnet0HostOnlyVMnet1NATVMnet8Using NAT for network name '%s'.", "bora\\devices\\vmxnet3\\vmxnet3_hosted.cVMXNET3 hosted: Failed to read a packet from the vmnet interface. Error code: %d.", "vmx.vdfsdvmci.qpMemoryLimitVMCI QueuePair: Set maximum QP pages to (%I64u).", "vmci.qpMemoryLimit", "To collect data to submit to VMware technical support, run \"vm-support\".", "@&!*@*@(button.guestArmVMKernel8)VMware ESXi 8 Arm", "VMware Secure Boot Signing0", "VMCI: Failed to initialize queue pair state.", "IOCTL_VMX86_APIC_INIT failed: %s", "/usr/share/certs/vmware.crl", "HgfsChannelVmciConnectInternal", "%s: Backdoor HGFS server session init %s.", "aioaioGenericaioHttpaioKernelaioMgraioWin32aioWin32CompletionamdIommuappstateassignHwasyncsocketatapiCdromauthenticodeautomationAVCapturebarrierbatteryblitbrtalkbuslogicMdevbuttonchipsetcmoscptOpscpuc", "vmware.cipherName", "@&!*@*@(button.vmci.cancel)Cancel", "<VMWARE-NULL>", "VMCI: Obsolete unrestricted setting was ignored.", "VMware Virtual SATA Hard DriveAHCI-USER: %s does not have WWN, deactivating WWN reporting.", "HgfsEscape_GetSize", "HgfsFileIOLock", "IOCTL_VMX86_SET_MEMORY_PARAMS failed: %d %s", "perSharedFoldermapRootSharelinkRootShareHGFS_PutshareLabelHGFS_Purge/in/shareLabelHGFSPurgeVMDBWorkPurgebora\\build\\build\\vigor\\release\\vigor-vmx-source\\HGFS_stub.cppHGFSPurgeVTProcessHGFS_SetEnabled/i", "HGFS_SetWriteAccess/in/writeAccess", "VMware Backdoor Port", "mks.consolePTUseVMwareVID", "IOCTL_VMX86_GET_NUM_VMS failed: %s", "VMware Pointing Device compatibility", "Balloon: Start: vmmemctl reset balloon", "VMCIEvent%uVMCIEventListLock", "VMCIQPNUMPPNS", "HGFS_SetPresent", "vmware-mks.logCheck the mksSandbox.log and %s for more details.", "SOFTWARE\\VMware, Inc.\\%s", "@&!*@*@(msg.gostable8.guest.vmware-photon-64)VMware Photon OS 64-bit", "vmware.keyInfo", "@&!*@*@(msg.vpmc.ulmUnsupported)%s does not support virtualized performance counters on this host. Refer to VMware KB article 81623 at https://kb.vmware.com/s/article/81623 for more details.", "@&!*@*@(button.guestVMKernel9)VMware ESXi 9 and later", "HGFS_SetReadAccess/in/readAccess", "VMCI QueuePair: Couldn't inform guest about peer detach event.", "hgfsEnabled", "vmware-mks.log", "vmx.singlePanicFilevmware-panic%s%s%s.logPANIC: %sPanic loop", "VMXVmdbGuest_SetHgfsServerChannel", "bora\\mks\\renderers\\isb\\isbRendererCommWin32.c\\\\.\\pipe\\vmware\\mksSandbox\\mksSandbox-%sISBRendererComm: CreateFile failed (pipeName=%s, errno=%u)", "vmciEnabled%s.idPolicyregenerateVMCI: Powering on with VMCI context id 0x%x and policy %s.", "bora\\devices\\crosstalk\\queuePair.cVMCIQPHANDLECIDVMCIQPHANDLERIDVMCIQPPRODSIZEVMCIQPCONSSIZEVMCIQPNUMPRODPPNSVMCIQPNUMPPNSVMCIQPPEERIDVMCIQPRESTOREVMCIQPCREATEVMCIQPPPNsVMCIQPBPNSVMCINUMPENDINGQPSVMCI", "VmdbVmCfgReadHgfsUsability", "vmci.filter.enableVMCI: Failed to create datagram endpoint %d.", "ProductNameVMware WorkstationP", "| VMware", "@&!*@*@(button.guestArmCrxSys2_64)VMware CRX Sys 2.0 64-bit Arm", "%s: Vigor Transport publish failed for device HGFS", "UnityUpdatesLocktools.set.versionsetVersionDisabletools.set.versiontypevmx.capability.unified_loopunifiedLoopDisablevmx.set_optionsetOptionDisablevmx.capability.edit_scriptsscriptEditDisabletools.capa", "VMCI dataOut", "(VMware internal)VixDiskLibPlugin_EntryPointDISKLIB-PLUGIN : Could not find entry point for loadable module \"%s\". Not registering plugins.", "QEMUExtendedKeyEvent", "IOCTL_VMX86_GET_MONITOR_CONTEXT failed: %s", "HGFS.RedirectShellType", "HGFS__RedirectShellType", "VMware Virtual SCSI CDROM Drive", "vmci0.id", "vmmouseDataTail", "HGFSSetHostDefaultCaseVMDBWork", "VMAutomation_SendUnrecognizedCommandToGuestVix_1_Unrecognized_Command%s \"%d\" \"%s\"VMAutomation_MountHGFSInGuestVix_1_Mount_Volumes%s \"%d\" \"x\" \"vmhgfs\" \"0\" #VMAutomation_WaitForUserAction%s. VMAutomatio", "HGFSInfoSetBoolValueHGFSInfoSetStringValuelabelHGFSInfoGetCfgSuffixStringHGFSPurge%s: Purging share option: label= %s", "MONCB_VMCI_ICR_PORT", "VMCI_ICRPortHandler.part.0", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_INSTALL_GUEST_NOT_READY)VMware Tools are not running in the guest OS. Automatic upgrade is not possible", "DellIBMHPClearCubeFSCFujitsuHitachiLandeskNECRackableSunSymantecUnisys__errno_locationCopyright 1998-2003 VMware, Inc.0123456789ACDEFGHJKLMNPQRTUVWXYZ@&!*@*@(msg.serial.full.alphabet)The character num", "guest/caps/displayTopologyModesSetVMXVmdb_SetDisplayTopologyModesSetSupportedguest/caps/changeHost3DAvailabilityHintVMXVmdb_SetChangeHost3DAvailabilityHintSupportedguest/caps/displayTopologySetVMXVmdb", "isolation.tools.hgfs.notify.enable", "HGFS.ExpireType", "IOCTL_VMX86_CHECK_PSEUDO_TSC failed: %s", "bora\\lib\\hgfsServer\\hgfsServer.c", "%s: Outer VMware build=%u", "%s: Failed to register the HGFS server.", "Global\\vmware.vprint-s.%u.%u.%u", "VMCI: Powering on with VMCI context id 0x%x and policy %s.", "bora\\build\\build\\vigor\\release\\vigor-vmx-source\\HGFS_stub.cpp", "bora\\build\\build\\vigor\\release\\vigor-vmx-source\\VMCI_stub.cpp", "VMware User GroupCan't look up %S group: %s", "VMAutomation_MountHGFSInGuest", "@&!*@*@(msg.gostable8.guest.vmkernel4)VMware ESX/ESXi 4.x", "HGFS_SetEnabled", "guest/caps/hgfsServerDaemonguest/caps/hgfsServerUserguest/caps/hgfsServerUpgraderVMXVmdbGuest_SetHgfsServerChannelvmx/dnd/cap/dndGuestVersionVMXVmdbGuest_SetDnDVersionvmx/copypaste/cap/copyPasteGuestV", "VMCIDatagram: Destination resource %d unsupported.", "VMware Virtual SATA Hard Drive", "IOCTL_VMX86_ALLOC_LOCKED_PAGES failed: %s", "vmware-vmx", "\\\\.\\pipe\\vmware.vprint.%u.%u.%u", "IOCTL_VMX86_SET_MEMORY_PARAMS already set", "vmware.buildTree", "VMCI:  %s", "HGFS__REDIRECT_SHELL_TYPE__HGFS_REDIRECT_SHELL_DOWNLOADS", "VMCI_PutVMCI_SetFiltering/in/filterEnableVMCI_SetFiltering/in/filtersVMCISetFilteringVMDBWorkSetFilteringbora\\build\\build\\vigor\\release\\vigor-vmx-source\\VMCI_stub.cppVMCISetFilteringVTProcessvmx/vigor", "To install VMware Tools, log in to your guest and mount the CD-ROM device. See the %s product documentation for step-by-step guidance on installing VMware Tools for your guest operating system.", "HGFS_REDIRECT_SHELL_INVALID", "HgfsChannelActivateChannel", "@&!*@*@(msg.ipc.useConfigFileFailed)Failed to get exclusive lock on the configuration file. Another VMware process might be running using this configuration file.", "com.vmware.plugin.PluginLdrVmiop@1", "vmx/vigor/fields/VMCI", "VMware Authorization Service", "mks.gamingMouse.vmmouse", "HGFileCopyIsGuestFileDir%s: file name size %I64u exceeds HGFS packet", "A VMware External Hashdata FilesynctimecopypasteautohidebroadcastIPenableDnDsynctime.periodtime.synchronize.tools.enabletime.synchronize.guest.resynctime.synchronize.guest.resync.timeouttime.synchroni", "@&!*@*@(msg.upgradeVM.askToolsUpgrade)This virtual machine is not running the latest version of %s. If this virtual machine is upgraded before upgrading %s, the guest OS network settings will revert t", "AsyncVmciSocketRecvVSOCKET %d %s: no registered error handler!", "@&!*@*@(msg.gostable8.guest.CRXSys1-64)VMware CRX Sys 1.0 64-bit", "HgfsChannelBdDisconnectInternal%s: Backdoor HGFS server session terminated.", "   (cons \"vmware-photon-64\" 0x507E)", "VMware Virtual USB Storage", "VMCI QueuePair: Failed to add entry to hash table - Already exists", "To disable mitigations, change the side channel mitigations setting in the advanced panel of the virtual machine settings. Refer to VMware KB article 79832 at https://kb.vmware.com/s/article/79832 for", "ethernet%u.vnetvmnet%dpvnethernet%d.pvnIDval/generationNo[VMXVMDB] CfgState has been concurrently updated", "HgfsServerExitSessionInternal", "VMMon_VMCIGetCheckpointState", "rpci_channel.vsockconn.isPrivrpci_channel.vsockconn.packetLenrpci_channel.vsockconn.packetTyperpci_channel.staterpci_channel.reply.sizerpci_channel.reply.contentchannels.numberrpci_channel.hasListenSo", "VMCI: Failed to allocate register MMIO memory handle.", "HGFS_SetGuestName/in/shareLabel", "vmciDeviceSharedMonitor", "IOCTL_VMX86_UNMAP_SCATTER_LIST failed: %s", "%s \"%d\" \"x\" \"vmhgfs\" \"0\" #", "HgfsChannelDeactivateChannel", "vmware-vmx:%sUSB: Port already disconnected.", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_INSTALL_ALREADY_UP_TO_DATE)VMware Tools are already up to date", "VMCI: Failed to update VMCI doorbell checkpoint state, error %d.", "bora\\devices\\usb\\vusbMouse.cVMware Virtual USB Mousemouse.vusb.supportsBDoorEnableenableUSBMouseDisablemouse.vusb.startConnectedmouse.vusb.visiblemouse.vusb.absDisabledmouse.vusb.absVibrationmouse.vus", "isolation.tools.hgfs.disable", "VMMon_VMCIQueuePairDetach", "arm-vmware-photon-64", "vmmouse.present", "vmci.available", "HGFSSetGuestNameVTProcess", "AMDIommuUnpinVMCIIrt", "__vmware__W32Util_GetVMwareGroupSid%s: LookupAccountNameW: %d", "@&!*@*@(msg.vmmonWin32.noVersion)Could not get vmx86 driver version: %s.", "VMCINUMPENDINGQPS", "vmmouse.presentbackdoorAbsMouseabsMouseDataDisableabsMouseStatusDisableabsMouseCommandDisablevmmouse.supportsBDoorRestrictabsMouseRestrictDisablemks.gamingMouse.vmmouseVMMouse: Returning 0xffffffff (u", "bios.hddOrder:bios.bootRetry.enabledbios.bootRetry.delay@&!*@*@(button.vmnet)vmnet@&!*@*@(msg.vnet.ioctlOldBridge)Could not query bridging status on device '%s'.  Please update your %s driver.", "VMCI: Couldn't use context id 0x%x.", "guest/caps/unityFeaturesstartmenuvirtualdeskworkareamultimonguest/caps/ghiFeaturesshellActionBrowseshellLocationHGFSshellActionRuncmdShellActionguest/caps/hgfsUsabilityFeaturesmirrorDesktopmirrorDocum", "HGFS_SetTags/in/tags", "VMware HiddenVMware ReservedDEVCREAT: Partition type mismatch", "VMCI: Failed to allocate physical memory handle.", "@&!*@*@(button.guestCrxSys1_64)VMware CRX Sys 1.0 64-bit", "tools.capability.hgfs_server", "D:\\build\\ob\\bora-24409262\\bora\\build\\build\\vmware-vmx\\release\\win64\\vmware-vmx.pdbD", "vmci0.present", "vmware.contentType", "vmmouse.supportsBDoorRestrict", "WHP_CanBeInstalled%s: Hyper-V is not present, function should not be called.", "VMCI QueuePair: Invalid PPN (%I64x).", "VMwareToolsUpgrader9x.exeVMwareToolsUpgraderNT.exeVMwareToolsUpgrader.exec:%s\\%s%s -d/tmp%s//usr/bin/env bash %s%sTOOLS INSTALL Unsupported guest OS.", "\\\\.\\pipe\\vmware\\mksctrl", "GuestPeriodic_Putbora\\build\\build\\vigor\\release\\vigor-vmx-source\\GuestPeriodic_stub.cppvmx/vigor/fields/GuestPeriodicGuestPeriodicAttachHGFStagsHGFS_Put2%s: Vigor Transport publish failed for device H", "@&!*@*@(msg.gostable8.guest.arm-vmkernel7)VMware ESXi 7 Arm", "VMware Workstation", "vmci.notifications", "Disabling GL due to software/VMware card found.", "HGFSSetReadAccessVTProcess", "%s: Backdoor HGFS server session destroyed.", "VMCI: Invalid answer: %d", "@&!*@*@(msg.gostable8.guest.arm-CRXPod1-64)VMware CRX Pod 1.0 64-bit Arm", "VMMouse: CMD Read ID", "VMware Virtual USB StorageUSB-Storage: Unsupported CTRL request received.", "AMDIommuGetCachedDTEAMDIommuGetDTEAMDIommuHandleInvIommuPagesWorkAMDIommuCmdBufferErrorfile.33851AMDIommuAccessMsiMmioAMDIommuHandleIommuEnableAMDIommuPinIoApicIrtAMDIommuUnpinIoApicIrtAMDIommuUnpinVM", "@&!*@*@(msg.gostable8.guest.CRXPod1-64)VMware CRX Pod 1.0 64-bit", "HGFSSetHostPathVMDBWork", "HGFS__ExpireType", "VMCI resultHigh", "VMCIEvent%u", "IOCTL_VMX86_GET_REFERENCE_CLOCK_HZ failed: %s", "VMCIDatagram: Destination resource %d invalid.", "HGFS_Put2", "HgfsServerManager_ChangeState", "VMCIEventListLock", "isolationToolsVMdebugDisable", "HGFS__EXPIRE_TYPE__SHARED_FOLDER_NEVER", "VMCI.VMCIPCIVMCIPCIVMCI__VMCIPCIVMCI_SetFilteringVMCISetFiltering", "TOOLS INSTALL CopyImageDone::Backdoor copy operation failed(HGFS status %u).", "VMware Virtual IDE Hard Drive", "HGFS__REDIRECT_SHELL_TYPE__HGFS_REDIRECT_SHELL_MOVIES", "USERCALL_VMCI", "VMwareToolsUpgraderNT.exe", "CompanyNameVMware, Inc.V", "VIX_COMMAND_MOUNT_HGFS_FOLDERS", "VMCIDoorbells", "HGFS_SetEnabled/in/shareLabel", "VMCI: Failed to queue datagram (%d).", "HGFSSetPresentVMDBWork", "needsFirstSetHgfs", "%s: VMware detected", "@&!*@*@(button.guestHyperV)Hyper-V", "HGFS_SetTags/in/shareLabel", "AsyncVmciSocketClose%s() called on already closed asock!", "HGFSPurge", "AsyncVmciSocket.connected", "@&!*@*@(button.guestArmCrxSys1_64)VMware CRX Sys 1.0 64-bit Arm", "B/\\*?:\"<>|!@#$^&(){. CONPRNAUXNULLPTHgfsEscape_GetSize%s: failed to calculate escaped name size - name is invalid", "@&!*@*@(msg.vmx.nestedHyperV)%s and Hyper-V are not compatible. Remove the Hyper-V role from the system before running %s.", "@&!*@*@(msg.snapshot.take.notoolsAllocMap)Cannot request allocation maps when VMware Tools is not running.", "vmmouse", "VMCI QueuePair: QP Attach - host queue size mismatch", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_NOT_RUNNING)VMware Tools are not running in the guest", "%s: file name size %I64u exceeds HGFS packet", "vmx/vigor/fields/HGFS", "vmware", "Lecteur de disques virtuels)Type de lecteur inconnu. Contactez VMware", "IOCTL_VMX86_RELEASE_VM failed: %s", "%s: Backdoor HGFS server session terminated.", "vmmouseLastMove", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_INSTALL_AUTO_NOT_SUPPORTED)The VMware Tools installation cannot be upgraded automatically", "vvt.simMBX.permittedvvt.simMBX.availablevnptSimMBXEnabled@&!*@*@(msg.vbs.nested)Running a VBS guest nested inside of another VM will result in severely degraded performance and is not recommended.@&!*", "@&!*@*@(button.guestPhoton_64)VMware Photon OS 64-bit", "VMnetAdapterVMnetx@&!*@*@(msg.hostonly.servicedown)The host-only adapter driver does not seem to be running. If you have not rebooted the host since installing the host-only network adapter, you need ", "HGFSSetEnabled", "VMXNET3 hosted: Failed to read a packet from the vmnet interface. Error code: %d.", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_INSTALL_IMAGE_COPY_FAILED)Could not copy VMware Tools image to the guest operating system", "vmmouseDataHead", "guest/guestInfo/toolsManifestInfo/vmToolsStatusFailed to set tools manifest vm status to vmdb: ret = %s.", "VMCISetFiltering", "hgfsusability.redirectshell%s: Could not build rpc string", "VMware Virtual USB Keyboard", "VMCI_RegMemHandler", "IOCTL_VMX86_REMEMBER_KHZ_ESTIMATE failed: %s", "@&!*@*@(msg.gostable8.guest.arm-vmkernel9)VMware ESXi 9 and later Arm", "bora\\devices\\crosstalk\\vmci.c", "pciBridge0.presentpciBridge0.virtualDevLSILogic compatibilityVirtual BluetoothHDAudioVirtual AccelerometerVirtual Ambient Light SensorVirtual CompassVirtual GyrometerVirtual InclinometerVirtual Locati", "VMCIQPCREATE", "VMMon_LookUpMPN_NEWIOCTL_VMX86_LOCK_PAGE%s failed: %s", "HGFS__REDIRECT_SHELL_TYPE__HGFS_REDIRECT_SHELL_INVALID", "@&!*@*@(button.guestVMKernel4)VMware ESX/ESXi 4.x", "ata-hardDiskrawDiskplainDiskatapi-cdromscsi-nonpassthru-rdmscsi-passThru-rdmscsi-passThruhidhubbluetoothvideobuslogicvmxbuslogiclsilogicvmxlsilogiclsisas1068pvscsiahcisb16vlancee1000vmxnetvmxnet3e1000", "vmware64-core", "/usr/share/certs/vmware.cert", "IOCTL_VMX86_GET_ALL_MSRS failed: %s", "vmware.productVersionNumber", "dgHypervisorCountdgHypervisorSizedgHypervisorBufferVMCI: Invalid datagram size in checkpoint", " rimovibile1File system sconosciuto. Contatta supporto VMware", "AsyncVmciSocket.recvBuf", "vmci.filter.filters", "HGFSSetHostPath", "A VMware External Hashdata File(0", "RamDisk-Laufwerk3Unbekannter Laufwerktyp. Wenden Sie sich an VMware.", "vmmouseData", "bora\\build\\build\\vigor\\release\\vigor-vmdb-source\\HGFS_schema.c", "@&!*@*@(msg.checkpoint.oldproduct)Unable to resume virtual machine. The virtual machine cannot resume because it was suspended in an incompatible version of a VMware product.", "IOCTL_VMX86_LOOK_UP_MPN failed: %s", "IOCTL_VMCI_INIT_CONTEXT failed: %s", "VMCI: Sync of VMX user %s failed: %d", "VMCI.VMCIPCI", "fcomplete and openedHgfsChannelBdConnectInternal%s: Backdoor HGFS server session init %s.", "VMMon_VMCISetCheckpointState", "vcpuBarrier%uBalloon: Start: vmmemctl reset balloon", "VMNet0", "VMNet1", "A VMware External Hashdata File", "MONCB_VMCI_MEMORY", "\\\\.\\Global\\vmx86@&!*@*@(msg.vmmonWin32.openAccessDenied)Failed to open device '%s': %s", "MiBvmx.overheadMemSizesched.overhead.vmx.verifybora\\vmx\\main\\overheadmemVMX.c@&!*@*@(msg.vigor.operationCancelled)The operation was cancelled by the user.@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_INSTAL", "HGFS_SetHostPath/in/hostPath", "@&!*@*@(msg.monitorevent.hyperV.AVX.AMD)The installed Hyper-V guest is not compatible with this CPU. To run nested guests under Hyper-V, you must install Windows Server 2008 R2 Service Pack 1 and an a", "VMNet8", "ctlrIxix%s%u:%u%s%uvmiRTCsvgamousevcpuclass/vcpu/numideDevclass/ideDevidescsiDevclass/scsiDevsataDevclass/sataDevscsiCtlrclass/scsiCtlrsataCtlrclass/sataCtlrclass/nicclass/serialclass/parallelclass/pc", "%s: Invalid VMCI transport request type", "VMware Balloon Backdoor Portsched.mem.balloon.maxdebugtargetsched.mem.balloon.debugzerofrequencysched.mem.balloon.forceSmallPagessched.mem.balloon.resetlimitsched.mem.balloon.decayperiodsched.mem.ball", "hgfs.linkRootShare", "%s: VMCI HGFS server session destroyed.", "IOCTL_VMX86_SYNC_GET_TSCS failed: %s", "HGFSSetReadAccessVMDBWork", "D:\\build\\ob\\bora-24409262\\bora\\lib\\misc\\posixInt.h%pVmdbW32AllocHookTableVMware.vmdbSignalMsgbora\\lib\\vmdb\\vmdbWin32MsgLoop.cD:\\build\\ob\\bora-24409262\\bora\\lib\\vmdb\\rbtreeC.hvmdbWqpoolLock%s/wqppollWQ", "VMCI QueuePair: VMMon_VMCIQueuePairDetach failed during CPT_CONTINUE_SYNC (result=%d).", "IOCTL_VMX86_GET_KHZ_ESTIMATE failed: %s", "InternalNamevmware-vmxd ", "HGFSInfoSetStringValue", "vmware.iv", "mks.gl.allowSoftwareAndVMwareDrivers", "vmware.vmk.guest.memSizeMB", "VMCI: Failed to open handle to vmci.", "crx.sockagent.sockVSOCKPROXY: No vmci device present.", "VMCISetFilteringVMDBWork", "VMCI_SetFiltering/in/filters", "IOCTL_VMX86_SEND_IPI failed: %s", "hgfs.handlecounterX", "VMMon_VMCIDoorbell", "vmci.sys@&!*@*@(msg.vmciWin32.badDriver)You have an incorrect version of driver '%s'. Try reinstalling %s.", "vmware-tools-upgrader-32", "VMCIQPPEERID", "VMCINumDoorbells", "HGFS_SetGuestName", "HGFS__REDIRECT_SHELL_TYPE__HGFS_REDIRECT_SHELL_DOCUMENTS", "VMWare", "HgfsChannelVmciDisconnectInternal", "bora\\build\\build\\vigor\\release\\vigor-vmdb-source\\VMCI_schema.c", "HGFileCopyGetGuestFileAttr%s: file name %I64u exceeds HGFS packet", "vmmouseRestrictVMMouse: Illegal bdoorRestrict value=%d", "hgfsUsability", "%s: VMCI HGFS server session init %s.", "VMware Virtual IDE CDROM Drive", "VMMouse: CMD Request Relative while not enabled!", "vmci.filter.enable", "%s: HGFS [%s] channel ACTIVATED.", "@&!*@*@(msg.vnet.connectvnet)Could not connect '%s' to virtual network '%s'. More information can be found in the vmware.log file.", "HGFSSetWriteAccessVMDBWork", "HGFS_REDIRECT_SHELL_DESKTOP", "IOCTL_VMCI_DATAGRAM_RECEIVE failed: %s", "HgfsServerManagerVigorExit", "vmware.productName", "VMCI QueuePair: Received QueuePair detach call with invalid data.", "VMCI QueuePair: %s failed --- handle %x:%x not found.", "tools-hgfs", "bora\\vmx\\automation\\sharedFolderCommands.cVMAutomation_SetSharedFolderStateVMAutomation_RemoveSharedFolderVMAutomation_EnableSharedFoldersvmx/cfgState/val/guestIsolation/hgfsDisableVMAutomationPerShar", "@&!*@*@(msg.gostable8.guest.arm-vmkernel8)VMware ESXi 8 Arm", "Global\\__VMware-%sutilWin32: Cannot reserve %s: %s", "AsyncVmciSocket.numSendBuf", "vmx.log.guest.leveltools.guest.desktop.autolockmessageBus.tunnelEnabledtools.syncTime.periodToolsSetSyncTimeStartupBackwardToolsSetSyncTimeSlewCorrectiontools.syncTime.percentCorrectionToolsSetSyncTim", "vmware-vmx:%s", "HgfsChannelVmciCloseInternal", "VMCI_Put2", "VMCI_Enabled", "VMware Hidden", "upgrade.noToolsVersionmsg.upgradeVM.askToolsUpgrade@&!*@*@(msg.upgrade.unsupported.nicState.expanded)Scheduled upgrade is not supported because this virtual machine is not running the latest version o", "VMCI QueuePair: Queuepair alloc datagram (handle=0x%x:0x%x) too small (size=%u).", "VMMon_VMCIReceiveNotifications", "If you are logged in to the guest OS but do not see VMware Tools installing, open the CD-ROM device in the guest OS with Windows Explorer and double-click \"setup.exe\".", "VMCI_RegMemHandler_ScbData", "@&!*@*@(msg.gostable8.guest.vmkernel5)VMware ESXi 5.x", "VMware Virtual USB Mouse", "@&!*@*@(msg.vmci.checkpoint.badCapabilities)The VMCI device driver in the snapshot uses hardware capabilities that this host does not support.", "HGFSPurgeVMDBWork", "vmx86.sys", "vmware-tools-upgrader-64", "/usr/share/certs/vmware.cert/usr/share/certs/vmpartner.cert/usr/share/certs/vmware.crl/usr/share/certs/vmpartner.crlData buffer too small.", "\\\\.\\Global\\VMnetUserif", "HgfsServerGetLocalNameInfo", "VMMouse: Disabling VMMouse mode", "HgfsServerSessionQuiesce%s: failed to resume the threadpool", "6.0VMware Fusion for Mac OSStateLastModifiedMaxHostCpusMaxVcpusPerVmOptionHash2LicensecheckRemoveKeyword%s: Only reg license on WIN32@&!*@*@(msg.License.registry.key.open.failure)Unable to open the re", "VIX_COMMAND_UNKNOWNVIX_COMMAND_VM_POWERONVIX_COMMAND_VM_POWEROFFVIX_COMMAND_VM_RESETVIX_COMMAND_VM_SUSPENDVIX_COMMAND_RUN_PROGRAMVIX_COMMAND_KEYSTROKESVIX_COMMAND_READ_REGISTRYVIX_COMMAND_WRITE_REGIST", "Software\\VMware, Inc.Software\\VMware, Inc.\\Running VM ListUnable to announce VM", "hgfs.fdCache.maxNodes", "VMCI QueuePair: Error allocating PPN list.", "HgfsServerManagerVmdbSet", "VMnet", "VMCI: Ioctl to receive datagram failed (%d).", "checkpoint.overrideVersionCheckVMware@&!*@*@(msg.checkpoint.resume.newVersion)The suspended state for this virtual machine was created by an incompatible version of %s software. Resuming is not possib", "Copyright 1998-2003 VMware, Inc.", "guest/caps/hgfsServerUser", "%s.unrestrictedVMCI: Obsolete unrestricted setting was ignored.", "@&!*@*@(msg.vmxvmdbCb.startInstallTools.other)%s will now attach the VMware Tools CD-ROM image to the virtual machine.", "HgfsSharedMemoryLock", "fail@&!*@*@(msg.vmci.cid.fail)Failed to power on due to VMCI context ID collision using context ID 0x%x and policy %s.", "DiskLibNumHostIOsDiskLibNumHostReadsDiskLibNumHostWritesDiskLibNumHostIOBytesDiskLibNumHostReadBytesDiskLibNumHostWriteBytesMemoryGuestLockedMemoryBytesMemoryGuestVirtualPhysicalMemoryBytesMemoryPerce", "D:\\build\\ob\\bora-24409262\\bora\\build\\build\\vmware-vmx\\release\\win64\\vmware-vmx.pdb", "FileDescriptionVMware Workstation VMXL", "HGFSSetFollowSymlinksVMDBWork", "VMMouse: CMD Disable", "VNET: MACVNetPort_Connect: %s: can't open vmnet device (%d)", "VMCI dataIn", "IOCTL_VMX86_GET_MEM_INFO failed: %s", "HgfsServerExitSessionInternal%s: teardown session %p id 0x%I64x", "vmmouseRestrict", "HGFS_SetReadAccess/in/shareLabel", "MDALj2aTPs+9xYa9+bG3tD60B8jzljHz7aRP+KNOjSkVWLjVb3/ubCK1sK9IRQq9qEmUv4RDsNuE", "VMCI_DataOutMonHandler", "AsyncVmciSocketRecv", "VMware Virtual HID", "VMCIDgTableLock", "vmware vmmDumping core for vcpu-%d", "@&!*@*@(msg.foundryErrMsgId.VIX_E_UNRECOGNIZED_COMMAND_IN_GUEST)The command is not recognized by VMware Tools", "VMCINumWellKnownIDs@&!*@*@(msg.vmci.wellknown.failedResume)Could not restore all well-known resource IDs.", "serial0.fileName=/usr/share/certs/vmware.cert", "VMCISockMsgQLock", "HgfsChannelDeactivateChannel%s: HGFS [%s] channel DEACTIVATED.", "vmware-photon", "HGFSSetExpirationVTProcess", "VSOCKPROXY: No vmci device present.", ".lckvmware-corevmware64-corecore.gmmcorevmmcoresvmx-zdumpvmx-debug-zdump%s-vss_manifests%d.zipData.pngplistSnapshotVVolRevertRecoverHandleIntSNAPSHOT: %s:Couldn't revert from temporary snapshot : %s (", "VMMouse: Dropping move received while command 0x%08x active", "VMCIQPPPNs", ">config.versiondefaultalldataFileKeyancestorDataFileKeysA VMware External Hashdata FileP", "(define (is-guestosid-hyper-v guestosid)", "@&!*@*@(msg.vmmon.createVMFailed.5lp)VMware Workstation cannot run on hosts with 5-level paging enabled.", "IOCTL_VMX86_UNLOCK_PAGE_BY_MPN failed: %s", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_INSTALL_IMAGE_INACCESIBLE)The VMware Tools image is inaccessible", "VSOCKPROXY: Failed to get remote VMCI address, Connection#%d", "VMCI capabilities", "hgfsusability.redirectshell", "VMCISockWaitQLock", "\\\\.\\VMCIDev\\VMX", "OriginalFilenamevmware-vmx.exeF", "HGFSSetTagsVTProcess", "vmware.buildVersion", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_TOO_OLD_FOR_OPERATION)Upgrade VMware Tools on this virtual machine; the current version does not support the requested operation", "@&!*@*@(msg.vmciWin32.dupEntry)Given VMCI context id %u is in use by another VM.", "AMDIommuPinVMCIIrt", "vmware-vmxvmwareTo run the user interface, use %s and not %s.", "HgfsChannelBdConnectInternal", "@&!*@*@(button.guestCrxSys2_64)VMware CRX Sys 2.0 64-bit", "%s: VMCI HGFS server session terminated: header version: %d.", "isolation.tools.hgfs.oplock.enable", "VMware Fusion for Mac OS", "com.vmware.plugin.PluginLdrVmiop@1VMIOP: plugin %s does not implement %s", "VMCI: Invalid datagram size in checkpoint", "Unidad de disco RAM5Tipo de controlador desconocido. Contactar con VMware", "@&!*@*@(button.guestArmPhoton_64)VMware Photon OS 64-bit Arm", "@&!*@*@(msg.gostable8.guest.CRXSys2-64)VMware CRX Sys 2.0 64-bit", "HGFSSetTags%s: tag \"%s\" not found using default %s", "@&!*@*@(msg.vmci.cid.fail)Failed to power on due to VMCI context ID collision using context ID 0x%x and policy %s.", "vmnetBridge", "If you are logged in to the guest OS but do not see VMware Tools installing, open the CD-ROM device in the guest OS with Windows Explorer and double-click \"setup.exe\".@&!*@*@(msg.vmxvmdbCb.startInstal", "VMMouse: Illegal bdoorRestrict value=%d", "sharedFolder%d.sharedFolder%dreadAccesswriteAccesshostDefaultCasefollowSymlinksshareTagshostPathguestNameredirectsharedFolder%uNULL@&!*@*@(msg.sharedFolder.invalidShareLabel)Shared folder label (%s) i", "vmx/cfgState/val/hgfsUsability/linkRootShare", "IOCTL_VMX86_RUN_VM failed: %s", "hgfs.mapRootShare", "vmciIrt", "HgfsServerSessionQuiesce", "IOCTL_VMX86_GET_PSEUDO_TSC failed: %s", "@&!*@*@(msg.foundryErrMsgId.VIX_E_WRAPPER_WORKSTATION_NOT_INSTALLED)Service type VIX_SERVICEPROVIDER_VMWARE_WORKSTATION was specified but not installed", "@&!*@*@(msg.vmci.uuid.failedGetBiosUUID)Invalid VM UUID.", "@&!*@*@(msg.gostable8.guest.vmkernel9)VMware ESXi 9 and later", "VMCI: Using reserved VMCI context id %d. Please use a context id above %d.", "HGFS__REDIRECT_SHELL_TYPE__HGFS_REDIRECT_SHELL_PICTURES", "vmware.keyHash", "VMware Virtual SCSI Hard Drive", "vmci.dmaDatagramSupport", "vmci.sys", "It conflicts with VMware reserved MACs for other usage.", "HgfsChannelBdDisconnectInternal", "dgOutPartialdgOutSizedgOutSizeCompletedgOutBufferdgInPartialdgInSizedgInSizeCompletedgInBufferVMCINumDoorbellsVMCIDoorbellsVMCI: Failed to update VMCI doorbell checkpoint state, error %d.", "HgfsNodeArrayLock", "HGFS_SetHostDefaultCase", "HGFSSetHostDefaultCase", "%s: Vigor Transport publish failed for device VMCI", "VMCI QueuePair: VMCIQueuePairAddEntry failed.", "hgfsUsabilityFeatures", "vmware.monitor.panickedVCPU", "@&!*@*@(msg.foundryErrMsgId.VIX_E_TOOLS_INSTALL_ERROR)The VMware Tools installation failed with an unknown error", "\\\\.\\Global\\VMnetUserifVNET: MACVNetPort_Connect: %s: can't open vmnet device (%d)", "ToolsBackup: manifest file transfer failed; rpc status = %d, tcl status = %d, hgfs status = %d.", "ToolsBackup: Writeable snapshot epoch for '%s' too large. (%I64u vs %I64u). Incremental backups might be inconsistent (please report to VMwareToolsBackup: Failed to find disk file, '%s'", "IOCTL_VMX86_UNLOCK_PAGE failed: %s", "HGFS__REDIRECT_SHELL_TYPE__HGFS_REDIRECT_SHELL_DESKTOP"]}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "Queries a list of all running processes", "match_data": ["ProcessInformation"]}]}, {"id": "T1018", "name": "Remote System Discovery", "link": "https://attack.mitre.org/techniques/T1018/", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping, net view using Net, or, on ESXi servers, esxcli network diag ping.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).  ", "signatures": [{"severity": "LOW", "description": "Uses ping.exe to check the status of other devices and networks", "match_data": ["C:\\Windows\\SysWOW64\\PING.EXE ping  127.0.0.1"]}]}, {"id": "T1016", "name": "System Network Configuration Discovery", "link": "https://attack.mitre.org/techniques/T1016/", "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface). On ESXi, adversaries may leverage esxcli to gather network configuration information. For example, the command esxcli network nic list will retrieve the MAC address, while esxcli network ip interface ipv4 get will retrieve the local IPv4 address.\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ", "signatures": [{"severity": "LOW", "description": "Uses ping.exe to check the status of other devices and networks", "match_data": ["C:\\Windows\\SysWOW64\\PING.EXE ping  127.0.0.1", "name: www.ip138.com"]}, {"severity": "LOW", "description": "Checks the online ip address of the machine", "match_data": ["C:\\Windows\\SysWOW64\\PING.EXE ping  127.0.0.1", "name: www.ip138.com"]}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "Reads ini files", "match_data": ["C:\\Users\\user\\Documents\\conf.ini", "C:\\Users\\user\\Documents\\conf.ini"]}, {"severity": "INFO", "description": "Writes ini files", "match_data": ["C:\\Users\\user\\Documents\\conf.ini", "C:\\Users\\user\\Documents\\conf.ini"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["C:\\ VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["C:\\ VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["C:\\ VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}]}]}, {"id": "TA0008", "name": "Lateral Movement", "link": "https://attack.mitre.org/tactics/TA0008/", "description": "The adversary is trying to move through your environment.\n\nLateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier. ", "techniques": [{"id": "T1021", "name": "Remote Services", "link": "https://attack.mitre.org/techniques/T1021/", "description": "Adversaries may use Valid Accounts to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP). They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain, or management platforms for internal virtualization environments such as VMware vCenter. \nLegitimate applications (such as Software Deployment Tools and other administrative programs) may utilize Remote Services to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer. Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data."}, {"id": "T1021.001", "name": "Remote Desktop Protocol", "link": "https://attack.mitre.org/techniques/T1021/001/", "description": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.", "signatures": [{"severity": "LOW", "description": "Contains VNC / remote desktop functionality (version string found)", "match_data": ["InterpFuncCMOVNC32", "RFB 003.008"]}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1560", "name": "Archive Collected Data", "link": "https://attack.mitre.org/techniques/T1560/", "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.", "signatures": [{"severity": "INFO", "description": "Public key (encryption) found", "match_data": ["-----BEGIN PUBLIC KEY-----"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1219", "name": "Remote Access Tools", "link": "https://attack.mitre.org/techniques/T1219/", "description": "An adversary may use legitimate remote access tools to establish an interactive command and control channel within a network. Remote access tools create a session between two trusted hosts through a graphical interface, a command line interaction, a protocol tunnel via development or management software, or hardware-level access such as KVM (Keyboard, Video, Mouse) over IP solutions. Desktop support software (usually graphical interface) and remote management software (typically command line interface) allow a user to control a computer remotely as if they are a local user inheriting the user or software permissions. This software is commonly used for troubleshooting, software installation, and system management. Adversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\nRemote access tools may be installed and used post-compromise as an alternate communications channel for redundant access or to establish an interactive remote desktop session with the target system. It may also be used as a malware component to establish a reverse connection or back-connect to a service or adversary-controlled system.\nInstallation of many remote access tools may also include persistence (e.g., the software's installation routine creates a Windows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).", "signatures": [{"severity": "LOW", "description": "Contains VNC / remote desktop functionality (version string found)", "match_data": ["InterpFuncCMOVNC32", "RFB 003.008"]}]}, {"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: x1.c.lencr.org", "DNS query: c.pki.goog", "DNS query: www.ip138.com", "DNS query: dnsdblookup.com"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Found CURL tool", "match_data": ["Usage: curl [options...] <url>", "Use \"--help [option]\" to view documentation for a given optionUsage: curl [options...] <url>allcategoryIncorrect option name to show help for, see curl -h", "DNS query: x1.c.lencr.org", "DNS query: c.pki.goog", "DNS query: www.ip138.com", "DNS query: dnsdblookup.com"]}, {"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["Usage: curl [options...] <url>", "Use \"--help [option]\" to view documentation for a given optionUsage: curl [options...] <url>allcategoryIncorrect option name to show help for, see curl -h", "DNS query: x1.c.lencr.org", "DNS query: c.pki.goog", "DNS query: www.ip138.com", "DNS query: dnsdblookup.com"]}]}, {"id": "T1090", "name": "Proxy", "link": "https://attack.mitre.org/techniques/T1090/", "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.", "signatures": [{"severity": "LOW", "description": "Found Tor onion address", "match_data": [" 6\\.onion.onion.Not resolving .onion address (RFC 7686)Hostname %s was found in DNS cachelocalhostlocalhost..localhost.localhost.Bad syntax CURLOPT_RESOLVE removal entry '%s'Resolve address '%s' found"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/3760ac44d14efaeab5e76d1ab728a31c12b25c968aafe314144a05056c917bec/behaviour_mitre_trees"}}