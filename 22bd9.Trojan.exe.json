{"data": {"CAPE Sandbox": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1014", "name": "Rootkit", "link": "https://attack.mitre.org/techniques/T1014/", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components."}]}, {"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system."}]}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}, {"id": "T1564", "name": "Hide Artifacts", "link": "https://attack.mitre.org/techniques/T1564/", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection."}]}, {"id": "T1562", "name": "Impair Defenses", "link": "https://attack.mitre.org/techniques/T1562/", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms."}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools."}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1562.001", "name": "Disable or Modify Tools", "link": "https://attack.mitre.org/techniques/T1562/001/", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Alternatively, they may add new directories to an endpoint detection and response (EDR) tool\u2019s exclusion list, enabling them to hide malicious files via File/Path Exclusions.\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities."}]}, {"id": "T1564.001", "name": "Hidden Files and Directories", "link": "https://attack.mitre.org/techniques/T1564/001/", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system."}]}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to get information about running processes on a system."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0040", "name": "Impact", "link": "https://attack.mitre.org/tactics/TA0040/", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "techniques": [{"id": "T1496", "name": "Resource Hijacking", "link": "https://attack.mitre.org/techniques/T1496/", "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \nResource hijacking may take a number of different forms. For example, adversaries may:\n\nLeverage compute resources in order to mine cryptocurrency\nSell network bandwidth to proxy networks\nGenerate SMS traffic for profit\nAbuse cloud-based messaging services to send large quantities of spam messages\n\nIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "The process attempted to dynamically load a malicious function"}, {"severity": "UNKNOWN", "description": "The process tried to load dynamically one or more functions."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1198", "name": "SIP and Trust Provider Hijacking", "link": "https://attack.mitre.org/techniques/T1198/", "description": "In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: \n\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\nModifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\nNote: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an Authenticode signature"}, {"severity": "UNKNOWN", "description": "The file have a Trusted Certificate"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1198", "name": "SIP and Trust Provider Hijacking", "link": "https://attack.mitre.org/techniques/T1198/", "description": "In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: \n\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\nModifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\nModifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\nNote: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "signatures": [{"severity": "UNKNOWN", "description": "The binary has an Authenticode signature"}, {"severity": "UNKNOWN", "description": "The file have a Trusted Certificate"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "The process may have looked for a particular process running on the system"}, {"severity": "UNKNOWN", "description": "The process attempted to detect a running debugger using common APIs"}]}, {"id": "T1063", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1063/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nWindows\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\nMac\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.", "signatures": [{"severity": "UNKNOWN", "description": "It Tries to detect injection methods"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1047", "name": "Windows Management Instrumentation", "link": "https://attack.mitre.org/techniques/T1047/", "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, wmic.exe can be abused by an adversary to delete shadow copies with the command wmic.exe Shadowcopy Delete (i.e., Inhibit System Recovery).\nNote: wmic.exe is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like wbemtool.exe, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.", "signatures": [{"severity": "LOW", "description": "Queries BIOS Information (via WMI, Win32_Bios)", "match_data": ["IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BIOS", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BIOS", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}]}, {"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "INFO", "description": "Creates job files (autostart)", "match_data": ["C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0F87369F-A4E5-4CFC-BD3E-73E6154572DD}", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\TreatAs", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\Elevation"]}, {"severity": "INFO", "description": "Creates COM task schedule object (often to register a task for autostart)", "match_data": ["C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0F87369F-A4E5-4CFC-BD3E-73E6154572DD}", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\TreatAs", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\Elevation"]}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "INFO", "description": "Creates job files (autostart)", "match_data": ["C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0F87369F-A4E5-4CFC-BD3E-73E6154572DD}", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\TreatAs", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\Elevation"]}, {"severity": "INFO", "description": "Creates COM task schedule object (often to register a task for autostart)", "match_data": ["C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0F87369F-A4E5-4CFC-BD3E-73E6154572DD}", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\TreatAs", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\Elevation"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "userenv.dll", "version.dll", "netapi32.dll", "winmm.dll", "dnsapi.dll", "netutils.dll", "srvcli.dll", "cryptbase.dll", "iphlpapi.dll", "fwpuclnt.dll", "vssapi.dll", "vsstrace.dll", "kernel.appcore.dll", "es.dll", "amsi.dll", "profapi.dll", "samcli.dll", "samlib.dll", "propsys.dll", "catsrvut.dll", "mfcsubs.dll", "wtsapi32.dll", "wininet.dll", "taskschd.dll", "sspicli.dll", "xmllite.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "INFO", "description": "Creates job files (autostart)", "match_data": ["C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0F87369F-A4E5-4CFC-BD3E-73E6154572DD}", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\TreatAs", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\Elevation"]}, {"severity": "INFO", "description": "Creates COM task schedule object (often to register a task for autostart)", "match_data": ["C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0F87369F-A4E5-4CFC-BD3E-73E6154572DD}", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\TreatAs", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\InprocHandler", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer32", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\LocalServer", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}\\Elevation"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "userenv.dll", "version.dll", "netapi32.dll", "winmm.dll", "dnsapi.dll", "netutils.dll", "srvcli.dll", "cryptbase.dll", "iphlpapi.dll", "fwpuclnt.dll", "vssapi.dll", "vsstrace.dll", "kernel.appcore.dll", "es.dll", "amsi.dll", "profapi.dll", "samcli.dll", "samlib.dll", "propsys.dll", "catsrvut.dll", "mfcsubs.dll", "wtsapi32.dll", "wininet.dll", "taskschd.dll", "sspicli.dll", "xmllite.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000", "C:\\Windows\\System32\\svchost.exe base: 282271B0000", "PID: 2484 base: 1E892A30000 value: E9", "PID: 1932 base: 282271B0000 value: E9", "C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000 protect: page read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 282271B0000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Hijacks the control flow in another process", "match_data": ["C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000", "C:\\Windows\\System32\\svchost.exe base: 282271B0000", "PID: 2484 base: 1E892A30000 value: E9", "PID: 1932 base: 282271B0000 value: E9", "C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000 protect: page read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 282271B0000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000", "C:\\Windows\\System32\\svchost.exe base: 282271B0000", "PID: 2484 base: 1E892A30000 value: E9", "PID: 1932 base: 282271B0000 value: E9", "C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000 protect: page read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 282271B0000 protect: page execute and read and write"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "userenv.dll", "version.dll", "netapi32.dll", "winmm.dll", "dnsapi.dll", "netutils.dll", "srvcli.dll", "cryptbase.dll", "iphlpapi.dll", "fwpuclnt.dll", "vssapi.dll", "vsstrace.dll", "kernel.appcore.dll", "es.dll", "amsi.dll", "profapi.dll", "samcli.dll", "samlib.dll", "propsys.dll", "catsrvut.dll", "mfcsubs.dll", "wtsapi32.dll", "wininet.dll", "taskschd.dll", "sspicli.dll", "xmllite.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000", "C:\\Windows\\System32\\svchost.exe base: 282271B0000", "PID: 2484 base: 1E892A30000 value: E9", "PID: 1932 base: 282271B0000 value: E9", "C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000 protect: page read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 282271B0000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Hijacks the control flow in another process", "match_data": ["C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000", "C:\\Windows\\System32\\svchost.exe base: 282271B0000", "PID: 2484 base: 1E892A30000 value: E9", "PID: 1932 base: 282271B0000 value: E9", "C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000 protect: page read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 282271B0000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000", "C:\\Windows\\System32\\svchost.exe base: 282271B0000", "PID: 2484 base: 1E892A30000 value: E9", "PID: 1932 base: 282271B0000 value: E9", "C:\\Windows\\System32\\VSSVC.exe base: 1E892A30000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892DE0000 protect: page read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E892EF0000 protect: page execute and read and write", "C:\\Windows\\System32\\VSSVC.exe base: 1E893010000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 282271B0000 protect: page execute and read and write"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Creates a directory in C:\\Program Files", "match_data": ["C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Program Files\\Internet Explorer\\SbieDll.dll", "C:\\Program Files\\Internet Explorer\\SbieDll.bin", "C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Program Files\\Internet Explorer\\SbieDll.dll"]}, {"severity": "INFO", "description": "Creates files inside the program directory", "match_data": ["C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Program Files\\Internet Explorer\\SbieDll.dll", "C:\\Program Files\\Internet Explorer\\SbieDll.bin", "C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Program Files\\Internet Explorer\\SbieDll.dll"]}, {"severity": "INFO", "description": "Creates files inside the system directory", "match_data": ["C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Program Files\\Internet Explorer\\SbieDll.dll", "C:\\Program Files\\Internet Explorer\\SbieDll.bin", "C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Program Files\\Internet Explorer\\SbieDll.dll"]}, {"severity": "LOW", "description": "Drops executable to common a third party application directory", "match_data": ["C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Program Files\\Internet Explorer\\SbieDll.dll", "C:\\Program Files\\Internet Explorer\\SbieDll.bin", "C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppId\\Microsoft Compatibility Internet Explorer", "C:\\Program Files\\Internet Explorer\\SbieSvc.exe", "C:\\Program Files\\Internet Explorer\\SbieDll.dll"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["64 > 30", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["64 > 30", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["64 > 30", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["64 > 30", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["64 > 30", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["64 > 30", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "LOW", "description": "Tries to detect sandboxes and other dynamic analysis tools", "match_data": ["(@C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXEC4}", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "SBIEDLL.DLL", "SBIEDLL.DLLSBIEDLL_HOOKVKENUMERATEINSTANCEVERSION", " HTTP05200520MICROSOFT COMPATIBILITY INTERNET EXPLORERMICROSOFT COMPATIBILITY INTERNET EXPLORERMICROSOFT COMPATIBILITY INTERNET EXPLORERC:\\PROGRAM FILES\\INTERNET EXPLORERSBIESVC.EXESBIEDLL.DLLSBIEDLL.", "      <COMMAND>C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE</COMMAND>", "  :\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXEY INTERNET EXPLORER  </EXEC>", "\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE`", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "$@C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "RAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "\"C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE8", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIEDLL.DLLZ", "$@\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "SANDBOXIE BITSSANDBOXIERPCSS.EXEMSIEXEC.EXE00000000_SBIE_SERVICE_NAMEKERNELBASE.DLLSECHOST.DLLNTCREATETIMER2NTDLL.DLLCOULD NOT LOAD SERVICE DLL - COULD NOT LOCATE SERVICEMAIN ROUTINE - %SCOIMPERSONATE", "MESSAGEBOXWUSER32.DLL^COIMPERSONATECLIENTOLE32.DLL)WTSQUERYUSERTOKENWTSAPI32.DLLRSBIEDLL_HOOKSBIEDLL.DLLP", "1C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "nSCSI\\Disk&Ven_QEMU&Prod_HARDDISK\\4&35424867&0&000000_0r", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["(@C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXEC4}", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "SBIEDLL.DLL", "SBIEDLL.DLLSBIEDLL_HOOKVKENUMERATEINSTANCEVERSION", " HTTP05200520MICROSOFT COMPATIBILITY INTERNET EXPLORERMICROSOFT COMPATIBILITY INTERNET EXPLORERMICROSOFT COMPATIBILITY INTERNET EXPLORERC:\\PROGRAM FILES\\INTERNET EXPLORERSBIESVC.EXESBIEDLL.DLLSBIEDLL.", "      <COMMAND>C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE</COMMAND>", "  :\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXEY INTERNET EXPLORER  </EXEC>", "\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE`", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "$@C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "RAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "\"C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE8", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIEDLL.DLLZ", "$@\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "SANDBOXIE BITSSANDBOXIERPCSS.EXEMSIEXEC.EXE00000000_SBIE_SERVICE_NAMEKERNELBASE.DLLSECHOST.DLLNTCREATETIMER2NTDLL.DLLCOULD NOT LOAD SERVICE DLL - COULD NOT LOCATE SERVICEMAIN ROUTINE - %SCOIMPERSONATE", "MESSAGEBOXWUSER32.DLL^COIMPERSONATECLIENTOLE32.DLL)WTSQUERYUSERTOKENWTSAPI32.DLLRSBIEDLL_HOOKSBIEDLL.DLLP", "1C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "nSCSI\\Disk&Ven_QEMU&Prod_HARDDISK\\4&35424867&0&000000_0r", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["(@C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXEC4}", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "SBIEDLL.DLL", "SBIEDLL.DLLSBIEDLL_HOOKVKENUMERATEINSTANCEVERSION", " HTTP05200520MICROSOFT COMPATIBILITY INTERNET EXPLORERMICROSOFT COMPATIBILITY INTERNET EXPLORERMICROSOFT COMPATIBILITY INTERNET EXPLORERC:\\PROGRAM FILES\\INTERNET EXPLORERSBIESVC.EXESBIEDLL.DLLSBIEDLL.", "      <COMMAND>C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE</COMMAND>", "  :\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXEY INTERNET EXPLORER  </EXEC>", "\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE`", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "$@C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "RAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "\"C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE8", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIEDLL.DLLZ", "$@\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "SANDBOXIE BITSSANDBOXIERPCSS.EXEMSIEXEC.EXE00000000_SBIE_SERVICE_NAMEKERNELBASE.DLLSECHOST.DLLNTCREATETIMER2NTDLL.DLLCOULD NOT LOAD SERVICE DLL - COULD NOT LOCATE SERVICEMAIN ROUTINE - %SCOIMPERSONATE", "MESSAGEBOXWUSER32.DLL^COIMPERSONATECLIENTOLE32.DLL)WTSQUERYUSERTOKENWTSAPI32.DLLRSBIEDLL_HOOKSBIEDLL.DLLP", "1C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "nSCSI\\Disk&Ven_QEMU&Prod_HARDDISK\\4&35424867&0&000000_0r", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["(@C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXEC4}", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "SBIEDLL.DLL", "SBIEDLL.DLLSBIEDLL_HOOKVKENUMERATEINSTANCEVERSION", " HTTP05200520MICROSOFT COMPATIBILITY INTERNET EXPLORERMICROSOFT COMPATIBILITY INTERNET EXPLORERMICROSOFT COMPATIBILITY INTERNET EXPLORERC:\\PROGRAM FILES\\INTERNET EXPLORERSBIESVC.EXESBIEDLL.DLLSBIEDLL.", "      <COMMAND>C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE</COMMAND>", "  :\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXEY INTERNET EXPLORER  </EXEC>", "\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE`", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "$@C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "RAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "\"C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE\"", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE8", "C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIEDLL.DLLZ", "$@\\C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "SANDBOXIE BITSSANDBOXIERPCSS.EXEMSIEXEC.EXE00000000_SBIE_SERVICE_NAMEKERNELBASE.DLLSECHOST.DLLNTCREATETIMER2NTDLL.DLLCOULD NOT LOAD SERVICE DLL - COULD NOT LOCATE SERVICEMAIN ROUTINE - %SCOIMPERSONATE", "MESSAGEBOXWUSER32.DLL^COIMPERSONATECLIENTOLE32.DLL)WTSQUERYUSERTOKENWTSAPI32.DLLRSBIEDLL_HOOKSBIEDLL.DLLP", "1C:\\PROGRAM FILES\\INTERNET EXPLORER\\SBIESVC.EXE", "nSCSI\\Disk&Ven_QEMU&Prod_HARDDISK\\4&35424867&0&000000_0r", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "Queries a list of all running processes", "match_data": ["ProcessInformation", "HandleInformation"]}, {"severity": "INFO", "description": "Queries a list of all open handles", "match_data": ["ProcessInformation", "HandleInformation"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Reads software policies", "match_data": ["HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BIOS", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "HandleInformation", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppID\\Microsoft Compatibility Internet Explorer VolumeInformation"]}, {"severity": "LOW", "description": "Queries BIOS Information (via WMI, Win32_Bios)", "match_data": ["HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BIOS", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "HandleInformation", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppID\\Microsoft Compatibility Internet Explorer VolumeInformation"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BIOS", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "HandleInformation", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppID\\Microsoft Compatibility Internet Explorer VolumeInformation"]}, {"severity": "INFO", "description": "Queries a list of all open handles", "match_data": ["HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BIOS", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "HandleInformation", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppID\\Microsoft Compatibility Internet Explorer VolumeInformation"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BIOS", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "HandleInformation", "C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\AppID\\Microsoft Compatibility Internet Explorer VolumeInformation"]}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "INFO", "description": "Installs a raw input device (often for capturing keystrokes)", "match_data": ["RegisterRawInputDevices"]}, {"severity": "INFO", "description": "Sample has functionality to log and monitor keystrokes, analyze it with the keystroke simulation cookbook", "match_data": ["RegisterRawInputDevices"]}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "INFO", "description": "Installs a raw input device (often for capturing keystrokes)", "match_data": ["RegisterRawInputDevices"]}, {"severity": "INFO", "description": "Sample has functionality to log and monitor keystrokes, analyze it with the keystroke simulation cookbook", "match_data": ["RegisterRawInputDevices"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: x1.c.lencr.org", "DNS query: c.pki.goog"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: x1.c.lencr.org", "DNS query: c.pki.goog"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/22bd92e13bfacca43e1f83d9ac6cbb52fed627b955c911a6602e462aebc6bb84/behaviour_mitre_trees"}}