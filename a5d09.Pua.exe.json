{"data": {"CAPE Sandbox": {"tactics": [{"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Packer Harvesting"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "INFO", "description": "Sample might require command line arguments, analyze it with the command line cookbook", "match_data": ["installer/pkg/installer", "unsafe.String: len out of rangecannot assign requested address.lib section in a.out corruptedmultipart/byteranges; boundary=http2: connection error: %v: %vframe_headers_prio_weight_shortPRIORITY frame", "unescaped < inside quoted stringConfiguration loaded successfullyfrontend/src/assets/lottie.min.jsfrontend/src/assets/fonts/OFL.txtrelease of handle with refcount 0sync: RUnlock of unlocked RWMutexGam", "WebVie2wProcess failed with kind %dFailed to get working directory: %vSubscribeServiceChangeNotifications-//netscape comm. corp.//dtd html//-//w3c//dtd html 4.0 transitional//-//webtechs//dtd mozilla ", "Commandline size = 4865", "Commandline size = 4804", "Commandline size = 4784", "Commandline size = 4970", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --embedded-browser", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=crashpad-ha", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=gpu-process", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=utility --u", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=renderer --"]}, {"severity": "LOW", "description": "Very long command line found", "match_data": ["installer/pkg/installer", "unsafe.String: len out of rangecannot assign requested address.lib section in a.out corruptedmultipart/byteranges; boundary=http2: connection error: %v: %vframe_headers_prio_weight_shortPRIORITY frame", "unescaped < inside quoted stringConfiguration loaded successfullyfrontend/src/assets/lottie.min.jsfrontend/src/assets/fonts/OFL.txtrelease of handle with refcount 0sync: RUnlock of unlocked RWMutexGam", "WebVie2wProcess failed with kind %dFailed to get working directory: %vSubscribeServiceChangeNotifications-//netscape comm. corp.//dtd html//-//w3c//dtd html 4.0 transitional//-//webtechs//dtd mozilla ", "Commandline size = 4865", "Commandline size = 4804", "Commandline size = 4784", "Commandline size = 4970", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --embedded-browser", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=crashpad-ha", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=gpu-process", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=utility --u", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=renderer --"]}, {"severity": "INFO", "description": "Sample may offer command line options, please run it with the command line option cookbook (it's possible that the command line switches require additional characters like)", "match_data": ["installer/pkg/installer", "unsafe.String: len out of rangecannot assign requested address.lib section in a.out corruptedmultipart/byteranges; boundary=http2: connection error: %v: %vframe_headers_prio_weight_shortPRIORITY frame", "unescaped < inside quoted stringConfiguration loaded successfullyfrontend/src/assets/lottie.min.jsfrontend/src/assets/fonts/OFL.txtrelease of handle with refcount 0sync: RUnlock of unlocked RWMutexGam", "WebVie2wProcess failed with kind %dFailed to get working directory: %vSubscribeServiceChangeNotifications-//netscape comm. corp.//dtd html//-//w3c//dtd html 4.0 transitional//-//webtechs//dtd mozilla ", "Commandline size = 4865", "Commandline size = 4804", "Commandline size = 4784", "Commandline size = 4970", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --embedded-browser", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=crashpad-ha", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=gpu-process", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=utility --u", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=renderer --"]}, {"severity": "INFO", "description": "Very long cmdline option found, this is very uncommon (may be encrypted or packed)", "match_data": ["installer/pkg/installer", "unsafe.String: len out of rangecannot assign requested address.lib section in a.out corruptedmultipart/byteranges; boundary=http2: connection error: %v: %vframe_headers_prio_weight_shortPRIORITY frame", "unescaped < inside quoted stringConfiguration loaded successfullyfrontend/src/assets/lottie.min.jsfrontend/src/assets/fonts/OFL.txtrelease of handle with refcount 0sync: RUnlock of unlocked RWMutexGam", "WebVie2wProcess failed with kind %dFailed to get working directory: %vSubscribeServiceChangeNotifications-//netscape comm. corp.//dtd html//-//w3c//dtd html 4.0 transitional//-//webtechs//dtd mozilla ", "Commandline size = 4865", "Commandline size = 4804", "Commandline size = 4784", "Commandline size = 4970", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --embedded-browser", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=crashpad-ha", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=gpu-process", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=utility --u", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\msedgewebview2.exe \"c:\\program files (x86)\\microsoft\\edgewebview\\application\\134.0.3124.93\\msedgewebview2.exe\" --type=renderer --"]}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["powrprof.dll", "umpdc.dll", "uxtheme.dll", "kernel.appcore.dll", "dwmapi.dll", "textinputframework.dll", "coremessaging.dll", "coreuicomponents.dll", "wintypes.dll", "cryptbase.dll", "version.dll", "propsys.dll", "edputil.dll", "userenv.dll", "profapi.dll", "sspicli.dll", "dbghelp.dll", "ntmarta.dll", "winmm.dll", "kbdus.dll", "windows.system.profile.platformdiagnosticsandusagedatasettings.dll", "diagnosticdatasettings.dll", "policymanager.dll", "msvcp110_win.dll", "coreprivacysettingsstore.dll", "gpapi.dll", "wkscli.dll", "netutils.dll", "mdmregistration.dll", "omadmapi.dll", "netapi32.dll", "dsreg.dll", "msasn1.dll", "twinapi.appcore.dll", "dwrite.dll", "windows.storage.dll", "dpapi.dll", "nlansp_c.dll", "iphlpapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "dnsapi.dll", "windows.ui.dll", "wtsapi32.dll", "winsta.dll", "cfgmgr32.dll", "windows.system.diagnostics.telemetry.platformtelemetryclient.dll", "winhttp.dll", "windows.security.authentication.web.core.dll", "iertutil.dll", "onecorecommonproxystub.dll", "mscms.dll", "bcrypt.dll", "wldp.dll", "windows.staterepositorycore.dll", "devobj.dll", "dataexchange.dll", "uiautomationcore.dll", "cryptsp.dll", "rsaenh.dll", "atlthunk.dll", "oleacc.dll", "directmanipulation.dll", "inputhost.dll", "netprofm.dll", "vaultcli.dll", "npmproxy.dll", "windows.web.dll", "aadwamextension.dll", "windows.system.userprofile.diagnosticssettings.dll", "mfplat.dll", "rtworkq.dll", "linkinfo.dll", "tenantrestrictionsplugin.dll", "windows.system.launcher.dll", "dxcore.dll", "dxgi.dll", "resourcepolicyclient.dll", "directxdatabasehelper.dll", "mf.dll", "d3d11.dll", "dcomp.dll", "d3d10warp.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["powrprof.dll", "umpdc.dll", "uxtheme.dll", "kernel.appcore.dll", "dwmapi.dll", "textinputframework.dll", "coremessaging.dll", "coreuicomponents.dll", "wintypes.dll", "cryptbase.dll", "version.dll", "propsys.dll", "edputil.dll", "userenv.dll", "profapi.dll", "sspicli.dll", "dbghelp.dll", "ntmarta.dll", "winmm.dll", "kbdus.dll", "windows.system.profile.platformdiagnosticsandusagedatasettings.dll", "diagnosticdatasettings.dll", "policymanager.dll", "msvcp110_win.dll", "coreprivacysettingsstore.dll", "gpapi.dll", "wkscli.dll", "netutils.dll", "mdmregistration.dll", "omadmapi.dll", "netapi32.dll", "dsreg.dll", "msasn1.dll", "twinapi.appcore.dll", "dwrite.dll", "windows.storage.dll", "dpapi.dll", "nlansp_c.dll", "iphlpapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "dnsapi.dll", "windows.ui.dll", "wtsapi32.dll", "winsta.dll", "cfgmgr32.dll", "windows.system.diagnostics.telemetry.platformtelemetryclient.dll", "winhttp.dll", "windows.security.authentication.web.core.dll", "iertutil.dll", "onecorecommonproxystub.dll", "mscms.dll", "bcrypt.dll", "wldp.dll", "windows.staterepositorycore.dll", "devobj.dll", "dataexchange.dll", "uiautomationcore.dll", "cryptsp.dll", "rsaenh.dll", "atlthunk.dll", "oleacc.dll", "directmanipulation.dll", "inputhost.dll", "netprofm.dll", "vaultcli.dll", "npmproxy.dll", "windows.web.dll", "aadwamextension.dll", "windows.system.userprofile.diagnosticssettings.dll", "mfplat.dll", "rtworkq.dll", "linkinfo.dll", "tenantrestrictionsplugin.dll", "windows.system.launcher.dll", "dxcore.dll", "dxgi.dll", "resourcepolicyclient.dll", "directxdatabasehelper.dll", "mf.dll", "d3d11.dll", "dcomp.dll", "d3d10warp.dll"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["powrprof.dll", "umpdc.dll", "uxtheme.dll", "kernel.appcore.dll", "dwmapi.dll", "textinputframework.dll", "coremessaging.dll", "coreuicomponents.dll", "wintypes.dll", "cryptbase.dll", "version.dll", "propsys.dll", "edputil.dll", "userenv.dll", "profapi.dll", "sspicli.dll", "dbghelp.dll", "ntmarta.dll", "winmm.dll", "kbdus.dll", "windows.system.profile.platformdiagnosticsandusagedatasettings.dll", "diagnosticdatasettings.dll", "policymanager.dll", "msvcp110_win.dll", "coreprivacysettingsstore.dll", "gpapi.dll", "wkscli.dll", "netutils.dll", "mdmregistration.dll", "omadmapi.dll", "netapi32.dll", "dsreg.dll", "msasn1.dll", "twinapi.appcore.dll", "dwrite.dll", "windows.storage.dll", "dpapi.dll", "nlansp_c.dll", "iphlpapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "dnsapi.dll", "windows.ui.dll", "wtsapi32.dll", "winsta.dll", "cfgmgr32.dll", "windows.system.diagnostics.telemetry.platformtelemetryclient.dll", "winhttp.dll", "windows.security.authentication.web.core.dll", "iertutil.dll", "onecorecommonproxystub.dll", "mscms.dll", "bcrypt.dll", "wldp.dll", "windows.staterepositorycore.dll", "devobj.dll", "dataexchange.dll", "uiautomationcore.dll", "cryptsp.dll", "rsaenh.dll", "atlthunk.dll", "oleacc.dll", "directmanipulation.dll", "inputhost.dll", "netprofm.dll", "vaultcli.dll", "npmproxy.dll", "windows.web.dll", "aadwamextension.dll", "windows.system.userprofile.diagnosticssettings.dll", "mfplat.dll", "rtworkq.dll", "linkinfo.dll", "tenantrestrictionsplugin.dll", "windows.system.launcher.dll", "dxcore.dll", "dxgi.dll", "resourcepolicyclient.dll", "directxdatabasehelper.dll", "mf.dll", "d3d11.dll", "dcomp.dll", "d3d10warp.dll"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Creates files inside the user directory", "match_data": ["C:\\Users\\user\\Desktop\\install.log"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll5", "Hyper-V RAWvi%SystemRoot%\\system32\\mswsock.dllmsSmartScreenProtection--mojo-named-platform-channel-pipe=6020.3452.1475831521349501328/pfhostedapp:ad70120cd53a577eeb3ca2b7b55507072dd7bca4", "@QEMU", "Hyper-V RAW.0%SystemRoot%\\system32\\mswsock.dlldded-browser-webview-dpi-awareness=2--no-pre-read-main-dll--always-read-main-dll--field-trial-handle=2024,i,1861093907765789939,7499726067124808942,262144"]}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "Reads ini files", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\desktop.ini"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Checks the free space of harddrives", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\Code Cache\\js FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\Code Cache\\wasm FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\blob_storage\\338fac64-8b5e-47ad-8dc8-636442102c3f FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default FullSizeInformation", "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Keyboard Layouts\\00000409", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\Windows\\System32\\drivers\\etc\\hosts VolumeInformation", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\Trust Protection Lists\\manifest.json VolumeInformation", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\WidevineCdm\\manifest.json VolumeInformation", "C:\\Windows\\Fonts\\segoeui.ttf VolumeInformation", "C:\\Windows\\Fonts\\seguisb.ttf VolumeInformation", "C:\\Windows\\Fonts\\segoeuib.ttf VolumeInformation", "C:\\Windows\\System32\\spool\\drivers\\color\\sRGB Color Space Profile.icm VolumeInformation"]}, {"severity": "INFO", "description": "Queries keyboard layouts", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\Code Cache\\js FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\Code Cache\\wasm FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\blob_storage\\338fac64-8b5e-47ad-8dc8-636442102c3f FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default FullSizeInformation", "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Keyboard Layouts\\00000409", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\Windows\\System32\\drivers\\etc\\hosts VolumeInformation", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\Trust Protection Lists\\manifest.json VolumeInformation", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\WidevineCdm\\manifest.json VolumeInformation", "C:\\Windows\\Fonts\\segoeui.ttf VolumeInformation", "C:\\Windows\\Fonts\\seguisb.ttf VolumeInformation", "C:\\Windows\\Fonts\\segoeuib.ttf VolumeInformation", "C:\\Windows\\System32\\spool\\drivers\\color\\sRGB Color Space Profile.icm VolumeInformation"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\Code Cache\\js FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\Code Cache\\wasm FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\blob_storage\\338fac64-8b5e-47ad-8dc8-636442102c3f FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default FullSizeInformation", "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Keyboard Layouts\\00000409", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\Windows\\System32\\drivers\\etc\\hosts VolumeInformation", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\Trust Protection Lists\\manifest.json VolumeInformation", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\WidevineCdm\\manifest.json VolumeInformation", "C:\\Windows\\Fonts\\segoeui.ttf VolumeInformation", "C:\\Windows\\Fonts\\seguisb.ttf VolumeInformation", "C:\\Windows\\Fonts\\segoeuib.ttf VolumeInformation", "C:\\Windows\\System32\\spool\\drivers\\color\\sRGB Color Space Profile.icm VolumeInformation"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\Code Cache\\js FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\Code Cache\\wasm FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default\\blob_storage\\338fac64-8b5e-47ad-8dc8-636442102c3f FullSizeInformation", "C:\\Users\\user\\AppData\\Roaming\\executable.exe\\EBWebView\\Default FullSizeInformation", "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Keyboard Layouts\\00000409", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\Windows\\System32\\drivers\\etc\\hosts VolumeInformation", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\Trust Protection Lists\\manifest.json VolumeInformation", "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\134.0.3124.93\\WidevineCdm\\manifest.json VolumeInformation", "C:\\Windows\\Fonts\\segoeui.ttf VolumeInformation", "C:\\Windows\\Fonts\\seguisb.ttf VolumeInformation", "C:\\Windows\\Fonts\\segoeuib.ttf VolumeInformation", "C:\\Windows\\System32\\spool\\drivers\\color\\sRGB Color Space Profile.icm VolumeInformation"]}]}, {"id": "T1018", "name": "Remote System Discovery", "link": "https://attack.mitre.org/techniques/T1018/", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping, net view using Net, or, on ESXi servers, esxcli network diag ping.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).  ", "signatures": [{"severity": "INFO", "description": "Reads the hosts file", "match_data": ["C:\\Windows\\System32\\drivers\\etc\\hosts"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: c.pki.goog", "DNS query: pub-253530798d9e45399631e3c9febae520.r2.dev"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: c.pki.goog", "DNS query: pub-253530798d9e45399631e3c9febae520.r2.dev"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/a5d090d1c36de5620283f2c78853739f3ba4d16c8bb0bf1b40dbe415b927e645/behaviour_mitre_trees"}}