{"data": {"CAPA": {"tactics": [{"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "enumerate files recursively"}, {"severity": "INFO", "description": "enumerate files on Windows"}, {"severity": "INFO", "description": "get file size"}, {"severity": "INFO", "description": "get common file path"}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Qemu"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "query environment variable"}, {"severity": "INFO", "description": "get disk information"}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "enumerate process modules"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Qemu"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "encode data using XOR"}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "INFO", "description": "parse PE header"}, {"severity": "INFO", "description": "link many functions at runtime"}, {"severity": "INFO", "description": "link function at runtime on Windows"}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "INFO", "description": "accept command line arguments"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0040", "name": "Impact", "link": "https://attack.mitre.org/tactics/TA0040/", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "techniques": [{"id": "T1486", "name": "Data Encrypted for Impact", "link": "https://attack.mitre.org/techniques/T1486/", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. Adversaries may also encrypt virtual machines hosted on ESXi or other hypervisors. \nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers or ESXi server login messages, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\nIn cloud environments, storage objects within compromised accounts may also be encrypted. For example, in AWS environments, adversaries may leverage services such as AWS\u2019s Server-Side Encryption with Customer Provided Keys (SSE-C) to encrypt data.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources."}]}, {"id": "T1485", "name": "Data Destruction", "link": "https://attack.mitre.org/techniques/T1485/", "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares..\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers. Similarly, they may delete virtual machines from on-prem virtualized environments.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1140", "name": "Deobfuscate/Decode Files or Information", "link": "https://attack.mitre.org/techniques/T1140/", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b or type command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.", "signatures": [{"severity": "UNKNOWN", "description": "Detected an attempt to pull out some data from the binary image"}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   "}, {"id": "T1027.009", "name": "Embedded Payloads", "link": "https://attack.mitre.org/techniques/T1027/009/", "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets. \nAdversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats. \nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format. \nEmbedded content may also be used as Process Injection payloads used to infect benign system processes. These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.", "signatures": [{"severity": "UNKNOWN", "description": "Drops interesting files and uses them"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1063", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1063/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nWindows\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\nMac\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.", "signatures": [{"severity": "UNKNOWN", "description": "It Tries to detect injection methods"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "version.dll", "vcruntime140.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "iphlpapi.dll", "libcrypto-1_1.dll", "libssl-1_1.dll", "bcrypt.dll", "mswsock.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "kernel.appcore.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "version.dll", "vcruntime140.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "iphlpapi.dll", "libcrypto-1_1.dll", "libssl-1_1.dll", "bcrypt.dll", "mswsock.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "kernel.appcore.dll"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "version.dll", "vcruntime140.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "iphlpapi.dll", "libcrypto-1_1.dll", "libssl-1_1.dll", "bcrypt.dll", "mswsock.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "kernel.appcore.dll"]}]}, {"id": "T1070", "name": "Indicator Removal", "link": "https://attack.mitre.org/techniques/T1070/", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred."}, {"id": "T1070.006", "name": "Timestomp", "link": "https://attack.mitre.org/techniques/T1070/006/", "description": "Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.\nIn Windows systems, both the $STANDARD_INFORMATION ($SI) and $FILE_NAME ($FN) attributes record times in a Master File Table (MFT) file. $SI (dates/time stamps) is displayed to the end user, including in the File System view, while $FN is dealt with by the kernel.\nModifying the $SI attribute is the most common method of timestomping because it can be modified at the user level using API calls. $FN timestomping, however, typically requires interacting with the system kernel or moving or renaming a file.\nAdversaries modify timestamps on files so that they do not appear conspicuous to forensic investigators or file analysis tools. In order to evade detections that rely on identifying discrepancies between the $SI and $FN attributes, adversaries may also engage in \u201cdouble timestomping\u201d by modifying times on both attributes simultaneously.\nIn Linux systems and on ESXi servers, threat actors may attempt to perform timestomping using commands such as touch -a -m -t <timestamp> <filename> (which sets access and modification times to a specific value) or touch -r <filename> <filename> (which sets access and modification times to match those of another file).\nTimestomping may be used along with file name Masquerading to hide malware and tools.", "signatures": [{"severity": "INFO", "description": "Binary contains a suspicious time stamp", "match_data": ["0xEFFF39AD [Sun Aug  4 18:57:49 2097 UTC]"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["Hyper-V RAWM", "jqEMu", "zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\certifi VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\cryptography-42.0.8.dist-info VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\ucrtbase.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\base_library.zip VolumeInformation", "C:\\Users\\user\\Desktop\\executable.exe VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362 VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-console-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-datetime-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-debug-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-errorhandling-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l2-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-handle-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-heap-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-interlocked-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-libraryloader-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-localization-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-memory-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-namedpipe-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processenvironment-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processthreads-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processthreads-l1-1-1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-profile-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-rtlsupport-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-string-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-synch-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-synch-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-sysinfo-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-timezone-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-util-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-conio-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-convert-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-environment-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-filesystem-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-heap-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-locale-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-math-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-process-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-runtime-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-stdio-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-string-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-time-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-utility-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\bcrypt VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\cryptography VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\libcrypto-1_1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\libssl-1_1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\pyarmor_runtime_009133 VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\python3.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\python310.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\select.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\unicodedata.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\VCRUNTIME140.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_brotli.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_bz2.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_cffi_backend.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_decimal.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_hashlib.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_lzma.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_queue.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_socket.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_ssl.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\pyarmor_runtime_009133\\pyarmor_runtime.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer\\md.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer\\md__mypyc.cp310-win_amd64.pyd VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\certifi VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\cryptography-42.0.8.dist-info VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\ucrtbase.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\base_library.zip VolumeInformation", "C:\\Users\\user\\Desktop\\executable.exe VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362 VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-console-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-datetime-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-debug-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-errorhandling-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l2-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-handle-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-heap-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-interlocked-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-libraryloader-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-localization-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-memory-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-namedpipe-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processenvironment-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processthreads-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processthreads-l1-1-1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-profile-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-rtlsupport-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-string-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-synch-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-synch-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-sysinfo-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-timezone-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-util-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-conio-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-convert-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-environment-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-filesystem-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-heap-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-locale-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-math-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-process-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-runtime-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-stdio-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-string-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-time-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-utility-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\bcrypt VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\cryptography VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\libcrypto-1_1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\libssl-1_1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\pyarmor_runtime_009133 VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\python3.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\python310.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\select.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\unicodedata.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\VCRUNTIME140.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_brotli.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_bz2.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_cffi_backend.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_decimal.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_hashlib.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_lzma.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_queue.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_socket.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_ssl.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\pyarmor_runtime_009133\\pyarmor_runtime.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer\\md.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer\\md__mypyc.cp310-win_amd64.pyd VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\certifi VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\cryptography-42.0.8.dist-info VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\ucrtbase.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\base_library.zip VolumeInformation", "C:\\Users\\user\\Desktop\\executable.exe VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362 VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-console-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-datetime-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-debug-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-errorhandling-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-file-l2-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-handle-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-heap-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-interlocked-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-libraryloader-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-localization-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-memory-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-namedpipe-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processenvironment-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processthreads-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-processthreads-l1-1-1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-profile-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-rtlsupport-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-string-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-synch-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-synch-l1-2-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-sysinfo-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-timezone-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-core-util-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-conio-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-convert-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-environment-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-filesystem-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-heap-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-locale-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-math-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-process-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-runtime-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-stdio-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-string-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-time-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\api-ms-win-crt-utility-l1-1-0.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\bcrypt VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\cryptography VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\libcrypto-1_1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\libssl-1_1.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\pyarmor_runtime_009133 VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\python3.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\python310.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\select.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\unicodedata.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\VCRUNTIME140.dll VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_brotli.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_bz2.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_cffi_backend.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_decimal.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_hashlib.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_lzma.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_queue.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_socket.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\_ssl.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\pyarmor_runtime_009133\\pyarmor_runtime.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer\\md.cp310-win_amd64.pyd VolumeInformation", "C:\\Users\\user\\AppData\\Local\\Temp\\_MEI53362\\charset_normalizer\\md__mypyc.cp310-win_amd64.pyd VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}]}, {"id": "T1016", "name": "System Network Configuration Discovery", "link": "https://attack.mitre.org/techniques/T1016/", "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface). On ESXi, adversaries may leverage esxcli to gather network configuration information. For example, the command esxcli network nic list will retrieve the MAC address, while esxcli network ip interface ipv4 get will retrieve the local IPv4 address.\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ", "signatures": [{"severity": "LOW", "description": "Checks the online ip address of the machine", "match_data": ["name: ip-api.com"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /json/?fields=hosting,isp,org HTTP/1.1Host: ip-api.comUser-Agent: python-requests/2.31.0Accept-Encoding: gzip, deflate, brAccept: */*Connection: keep-alive", "DNS query: c.pki.goog", "DNS query: ip-api.com", "DNS query: assets.msn.com"]}, {"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["GET /json/?fields=hosting,isp,org HTTP/1.1Host: ip-api.comUser-Agent: python-requests/2.31.0Accept-Encoding: gzip, deflate, brAccept: */*Connection: keep-alive", "DNS query: c.pki.goog", "DNS query: ip-api.com", "DNS query: assets.msn.com"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /json/?fields=hosting,isp,org HTTP/1.1Host: ip-api.comUser-Agent: python-requests/2.31.0Accept-Encoding: gzip, deflate, brAccept: */*Connection: keep-alive", "DNS query: c.pki.goog", "DNS query: ip-api.com", "DNS query: assets.msn.com"]}, {"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["GET /json/?fields=hosting,isp,org HTTP/1.1Host: ip-api.comUser-Agent: python-requests/2.31.0Accept-Encoding: gzip, deflate, brAccept: */*Connection: keep-alive", "DNS query: c.pki.goog", "DNS query: ip-api.com", "DNS query: assets.msn.com"]}]}, {"id": "T1105", "name": "Ingress Tool Transfer", "link": "https://attack.mitre.org/techniques/T1105/", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.  A number of these tools, such as wget, curl, and scp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via certutil -hashfile).\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /json/?fields=hosting,isp,org HTTP/1.1Host: ip-api.comUser-Agent: python-requests/2.31.0Accept-Encoding: gzip, deflate, brAccept: */*Connection: keep-alive"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/2f42fe061e6de9de2a8a762d76d3d39cb8ee5823615cfa386353ea03063031f3/behaviour_mitre_trees"}}